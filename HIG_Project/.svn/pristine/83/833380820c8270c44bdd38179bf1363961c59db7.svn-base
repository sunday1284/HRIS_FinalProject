<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<style>
body {
	font-family: 'Pretendard', sans-serif;
	background-color: #f4f6f8;
	color: #333;
}

.container {
	margin-top: 30px;
	width: 1600px;
}

.card {
	margin-bottom: 30px;
	border: none;
	border-radius: 15px;
	box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
	overflow: hidden;
	width: 1600px;
}

.card-header {
	font-size: 1.3rem;
	font-weight: 600;
	background-color: #ffffff;
	padding: 20px;
	border-bottom: 1px solid #e0e0e0;
	width: 1600px;
}

.card-body {
	padding: 25px;
	background-color: #ffffff;
	width: 1600px;
}

.breadcrumb {
	background: none;
	padding: 0;
	margin: 0;
	font-size: 0.95rem;
}

.breadcrumb .breadcrumb-item+.breadcrumb-item::before {
	content: '>';
	color: #6c757d;
	margin: 0 5px;
}

.breadcrumb .breadcrumb-item a {
	color: #0d6efd;
	text-decoration: none;
}

.breadcrumb .breadcrumb-item.active {
	color: #6c757d;
}

.form-row {
	display: flex;
	flex-wrap: wrap;
	gap: 20px;
	align-items: flex-end;
}
	.filter-section {
		display: flex;
		flex-wrap: wrap;
		align-items: flex-end;
		justify-content: space-between;
		gap: 20px;
	}

	.filter-group {
		display: flex;
		flex-direction: column;
		align-items: center;
		min-width: 150px;
	}

	.filter-group label {
		font-weight: 600;
		margin-bottom: 6px;
		text-align: center;
	}

	.filter-group select,
	.filter-group input[type="date"] {
		width: 160px;
		text-align: center;
		border-radius: 6px;
		padding: 6px 10px;
	}

	.button-group {
		display: flex;
		gap: 10px;
	}

label {
	font-weight: 600;
	margin-bottom: 8px;
	display: inline-block;
}

select, input[type="date"] {
	width: 100%;
	padding: 10px 12px;
	border: 1px solid #ced4da;
	border-radius: 8px;
	background-color: #f9f9f9;
	transition: border-color 0.3s ease-in-out;
}

select:focus, input[type="date"]:focus {
	border-color: #0d6efd;
	outline: none;
	background-color: #ffffff;
}

.btn-group {
	display: flex;
	gap: 12px;
}

button.btn {
	padding: 10px 18px;
	font-weight: 500;
	border-radius: 8px;
	transition: all 0.2s ease-in-out;
}

button.btn:hover {
	transform: translateY(-1px);
}

.table th, .table td {
	vertical-align: middle;
	padding: 14px;
}

.table th {
	background-color: #f1f3f5;
	font-weight: bold;
	color: #495057;
}

.table td {
	background-color: #ffffff;
	white-space: nowrap;
}

.filter-section select {
	width: 200px;
}
.emp-link {
  display: inline-block;
  padding: 6px 14px;
  color: #0d6efd;
  border-radius: 6px;
  font-weight: 500;
  font-size: 17px;
  text-decoration: none;
  transition: background-color 0.25s ease, color 0.25s ease, box-shadow 0.25s ease;
}

.emp-link:hover {
  background-color: #dbeaff;
  color: #084298;
  box-shadow: 0 2px 6px rgba(0, 123, 255, 0.25);
}

.emp-link:active {
  background-color: #c7dbff;
  color: #052c65;
}

</style>
<h3>전사 근태현황</h3>
<div class="page-container container-fluid" style="width: 1600px">
	<div
		class="d-flex justify-content-between align-items-center p-3 rounded-3 shadow-sm mb-4"
		style="background-color: #f8f9fa;">
		<!-- 좌측: Breadcrumb -->
		<nav aria-label="breadcrumb">
			<ol class="breadcrumb mb-0">
				<li class="breadcrumb-item fw-bold text-primary">📌 Quick Menu</li>
				<li class="breadcrumb-item active" aria-current="page">전사 근태현황</li>
				<li class="breadcrumb-item"><a
					href="${pageContext.request.contextPath }/annualList">연차 보유현황</a></li>
			</ol>
		</nav>

		<!-- 우측: 버튼 그룹 -->
		<div>
			<button type="button" class="btn btn-outline-secondary"
				onclick="history.back();">
				<i class="fas fa-arrow-left"></i> 뒤로가기
			</button>
		</div>
	</div>
</div>
<div class="container">
	<div class="card">
		<div class="card-body">
			<div id="chart-profile-visit"></div>
		</div>
	</div>
	<div class="card">
	<div class="card-body">
		<div class="filter-section">
			<div class="filter-group">
				<label for="department">부서</label>
				<select id="department" class="form-control">
					<option value="">전체</option>
					<c:forEach items="${departmentList}" var="departmentVO">
						<option value="${departmentVO.departmentId}">
							${departmentVO.departmentName}
						</option>
					</c:forEach>
				</select>
			</div>

			<div class="filter-group">
				<label for="team">팀</label>
				<select id="team" class="form-control">
					<option value="">전체</option>
					<c:forEach items="${teamList}" var="teamVO">
						<option value="${teamVO.teamId}" data-departmentId="${teamVO.departmentId}">
							${teamVO.teamName}
						</option>
					</c:forEach>
				</select>
			</div>

			<div class="filter-group">
				<label for="date">날짜 선택</label>
				<input type="date" id="date" name="date" class="form-control">
			</div>

			<div class="button-group">
				<button class="btn btn-outline-success" onclick="downloadExcel()">Excel 다운로드</button>
				<button class="btn btn-outline-danger" onclick="exportPDF()">PDF 출력</button>
			</div>
		</div>
	</div>
</div>
	<div class="card">
		<div class="card-body">
			<div id="table-container"></div>
		</div>
	</div>
</div>

<script>
//PDF 다운로드
function exportPDF() {
	const element = document.querySelector("#table1");

	const opt = {
		margin: 1,
		filename: '출퇴현황.pdf',
		html2canvas: { scale: 2 },
		jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' }
	};

	html2pdf().from(element).set(opt).save();
}

// Excel 다운로드
function downloadExcel() {
	var table = document.querySelector("#table1");
	var wb = XLSX.utils.table_to_book(table, { sheet: "출퇴현황" });
	XLSX.writeFile(wb, "출퇴현황.xlsx");
}
document.addEventListener("DOMContentLoaded", function() {
	fetchFilteredData();
	
	

	// 현재 날짜를 YYYY-MM-DD 형식으로 설정
	var today = new Date();
	var day = ("0" + today.getDate()).slice(-2);
	var month = ("0" + (today.getMonth() + 1)).slice(-2);
	var year = today.getFullYear();

	document.getElementById('date').value = year + "-" + month + "-" + day;

	var departmentList = [
		<c:forEach items="${departmentList}" var="x">
			{
				"departmentName": "${x.departmentName}",
			"departmentId": "${x.departmentId}",
			"employeeCount": "${x.departmentEmployeeCount}" // 부서별 인원수
            } <c:if test="${not empty x}">,</c:if>
		</c:forEach>
	];

	var arr_dept = [
		<c:forEach items="${departmentList}" var="x">
			"${x.departmentName}",
		</c:forEach>
	];

	var departmentAliveCount = [
		<c:forEach items="${todayAlive}" var="x">
			{"departmentName" : "${x.departmentName}",
			"AliveemployeeCount": "${x.departmentArrivedEmployeeCount}" //부서별 출근한 인원수
        } <c:if test="${not empty x}">,</c:if>
		</c:forEach>
	];

	var dac = departmentAliveCount; // 날짜별 근태가 있는 부서의 리스트와 근태찍은 인원 수

	const AliveCount = [];
	dac.forEach(function(department) {
		AliveCount.push(department.AliveemployeeCount);
	});
	
	document.getElementById("department").addEventListener("change", filterTeams);
	 
	// 부서에 하위 팀만 보여주는 함수
	function filterTeams() {
		var selectedDept = document.getElementById("department").value;
		var teamSelect = document.getElementById("team");  // 팀 셀렉트 박스
		var teamOptions = document.querySelectorAll(".team-option");

		// 팀 셀렉트를 "전체"로 리셋
		teamSelect.value = "";
		teamOptions.forEach(function(option) {
			if (selectedDept === "" || option.dataset.departmentid === selectedDept) {
				option.style.display = "block";
			} else {
				option.style.display = "none";
			}
		});

		fetchFilteredData(); // 부서가 변경되었을 때 필터링된 데이터 가져오기
	}

	// 팀 변경 시 필터링된 데이터를 가져오는 함수
	$("#team").change(function() {
		fetchFilteredData(); // 팀 선택 시 필터링된 데이터 새로 불러오기
	});

	// 날짜 변경 시 필터링된 데이터를 가져오는 함수
	$("#date").change(function() {
		fetchFilteredData(); // 날짜 변경 시 데이터 새로 불러오기
	});

	// 필터링된 데이터를 가져오는 함수
	function fetchFilteredData() {
		var departmentId = $("#department").val();
		var teamId = $("#team").val();
		var date = $("#date").val();

		$.ajax({
			url: "/filter",
			type: "GET",
			data: {
				departmentId: departmentId,
				teamId: teamId,
				date: date
			},
			dataType: "json",
			success: function(data) {
				updateTable(data.attendanceList);
				updateChart(data);  // 차트 업데이트 추가
			},
			error: function() {
				alert("데이터를 불러오는 중 오류가 발생했습니다.");
			}
		});
	}

	function updateTable(data) {
	    // 기존 테이블 제거
	    $("#table1").remove();

	    // 새 테이블 생성
	    var table = $("<table>").attr("id", "table1").addClass("table table-bordered");
	    var thead = $("<thead>").html(`
	        <tr>
	            <th>부서</th>
	            <th>팀</th>
	            <th>이름</th>
	            <th>출근</th>
	            <th>퇴근</th>
	            <th>근무시간</th>
	            <th>연장근무</th>
	            <th>야간근무</th>
	            <th>상태</th>
	        </tr>
	    `);
	    var tbody = $("<tbody>");

	    if (data.length === 0) {
	        tbody.append("<tr><td class='text-center' colspan='9'>데이터가 없습니다.</td></tr>");
	    } else {
	        $.each(data, function(index, x) {
	            var row = `
	                <tr>
	                    <td>\${x.employee.department.departmentName || "-"}</td>
	                    <td>\${x.employee.team.teamName || "-"}</td>
	                    <td><a class="emp-link" href="/myAttendance?empId=\${x.empId}">\${x.employee.name}</a> </td>
	                    <td>\${x.workStartTime || ""}</td>
	                    <td>\${x.workEndTime || ""}</td>
	                    <td>\${x.workingHours ? x.workingHours + "시간 " + (x.workingMinutes || 0) + "분" : ""}</td>
	                    <td>\${x.overtimeHours ? x.overtimeHours + "시간 " + (x.overtimeMinutes || 0) + "분" : ""}</td>
	                    <td>\${x.nightWorkHours ? x.nightWorkHours + "시간 " + (x.nightWorkMinutes || 0) + "분" : ""}</td>
	                    <td>\${x.attendanceStatus || ""}</td>
	                </tr>
	            `;
	            tbody.append(row);
	        });
	    }

	    table.append(thead).append(tbody);

	    // 삽입 위치는 페이지에 맞게 조정
	    $("#table-container").html(table);  // 예: <div id="table-container"></div>가 있는 경우
	    new simpleDatatables.DataTable(document.getElementById("table1"));
	}

	var barOptions = {
	  series: [
		{
		  name: "출근",
		  data: AliveCount,
		},
	  ],
	  chart: {
		type: "bar",
		height: 350,
	  },
	  title: {
		    text: "오늘의 출근 현황", // ✅ 차트 제목 추가
		    align: "center", // ✅ 중앙 정렬
		    style: {
		      fontSize: "18px", // ✅ 글자 크기 설정
		      fontWeight: "bold", // ✅ 굵게 표시
		      color: "#333", // ✅ 글자 색상 설정
		    },
		  },
	  plotOptions: {
		bar: {
		  horizontal: false,
		  columnWidth: "55%",
		  endingShape: "rounded",
		},
	  },
	  dataLabels: {
		enabled: true,
	  },
	  stroke: {
		show: true,
		width: 2,
		colors: ["transparent"],
	  },
	  xaxis: {
	  categories: departmentList.map(function(department) {
	      return `\${department.departmentName}`;
	    }),
	    labels: {
	        rotate: 0, // 0도로 설정하면 글자가 똑바로 출력됨
	        style: {
	            fontSize: '14px',       // 글씨 크기
	            fontFamily: 'Pretendard, sans-serif', // 원하는 글꼴로 설정 (기본 한글 친화적)
	            fontWeight: 500,        // 글씨 두께
	            colors: '#333'          // 글씨 색상 (선택사항)
	          }
	        }
	  },
	  yaxis: {
		  min: 0,
	    max: 30, // 총 인원보다 큰 최대값 설정
	  },
	  fill: {
		opacity: 1,
	  },
	  tooltip: {
		y: {
		  formatter: function (val) {
			return val + "명";
		  },
		},
	  },
	}

	// ApexCharts 차트 생성
	var chartBar = new ApexCharts(
		document.querySelector("#chart-profile-visit"),
		barOptions
	);

	// 차트 렌더링
	chartBar.render();

	// 차트 업데이트 함수
	function updateChart(mylist) {

		let arr_cnt = [];
		for(var i=0;i<departmentList.length;i++){
			arr_cnt.push(0);
		}

		for(var i=0;i<mylist.attendanceList.length;i++){
			let departmentName = mylist.attendanceList[i].employee.department.departmentName;

			for(var j=0;j<arr_dept.length;j++){
				if(arr_dept[j]==departmentName){
					arr_cnt[j]++;
					break;
				}
			}
		}
		// 출근 인원 데이터 업데이트 (기존 차트 유지)
		chartBar.updateSeries([{
			name: "출근",
			data: arr_cnt
		}]);

	}
});
</script>

<script
		src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.2/html2pdf.bundle.min.js"></script>
	<script
		src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
