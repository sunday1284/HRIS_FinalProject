package kr.or.ddit.employee.controller;

import java.io.IOException;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.employee.service.EmployeeService;
import kr.or.ddit.employee.vo.EmployeeVO;
import kr.or.ddit.file.service.FileInfoService;
import kr.or.ddit.validate.UpdateGroup;
import lombok.RequiredArgsConstructor;

@Controller
@RequestMapping("/employee/empUpdate")
@RequiredArgsConstructor
public class EmpUpdateController {
	
	private final EmployeeService service;
	public static final String MODELNAME = "employee";

	
    @Autowired
    private FileInfoService fileService;
    
	@GetMapping
	public String formUI(
			@RequestParam("empWho") String empId
			, Model model) {
		if(!model.containsAttribute(MODELNAME)) {
			EmployeeVO employee = service.readEmp(empId);
			model.addAttribute(MODELNAME, employee);
		}
		
		return "tiles:employee/empUpdate";
    }
	
	@PostMapping
	public String formProcess(
		@Validated(UpdateGroup.class) @ModelAttribute(MODELNAME) EmployeeVO employee	
		, BindingResult errors
		, HttpSession session
		, RedirectAttributes redirectAttributes
		, MultipartFile file
	) throws IOException{
		String logicalName = null;
		boolean valid = !errors.hasErrors();
		
		Long fileId = null;  // 그룹화된 파일 ID

        if (file != null && file.getSize() > 0) {
            
                if (!file.isEmpty()) {
                    if (fileId == null) {
                        fileId = fileService.createFileGroup(); // 새로운 FILE_ID 생성
                    }
                    Long detailId = fileService.saveFileWithGroup(file, fileId);
                    fileId = detailId;
                }
        }
		
		if(valid) {
			employee.setEmpImg(fileId);
			service.modifyEmp(employee);
			
		//직원 상태 변경시 근로계약서 상태도 함께 변경 추가 -박영규-	
		if (employee.getEmpStatus() != null) {
			service.updateEmpStatus(employee.getEmpId(), employee.getEmpStatus());
			}
			logicalName = "redirect:/employee/empList";		
						  
		} else {
			redirectAttributes.addFlashAttribute(MODELNAME, employee);
			String errorName = BindingResult.MODEL_KEY_PREFIX + MODELNAME;
			redirectAttributes.addFlashAttribute(errorName, errors);
			logicalName = "redirect:/employee/empDetail?empWho="+employee.getEmpId();		
		}	
		return logicalName;
	}
	@GetMapping("/retireLeaveForm")
	public String showRetireLeaveForm(Model model) {
	    List<EmployeeVO> empList = service.readEmpList(); 
	    model.addAttribute("empList", empList);
	    return "tiles:employee/employeeRetireLeaveForm";
	}
	
	@PostMapping("/retire")
	public String retireEmployee(@ModelAttribute EmployeeVO employeeVO, RedirectAttributes ra) {
	    int result = service.updateRetireInfo(employeeVO);
	    if (result > 0) {
	        ra.addFlashAttribute("message", "퇴사처리가 완료되었습니다.");
	    } else {
	        ra.addFlashAttribute("message", "퇴사처리에 실패했습니다.");
	    }
	    return "redirect:employee/retireList";
	}

	@PostMapping("/leave")
	public String leaveEmployee(@ModelAttribute EmployeeVO employeeVO, RedirectAttributes ra) {
	    int result = service.updateLeaveInfo(employeeVO);
	    if (result > 0) {
	        ra.addFlashAttribute("message", "휴직처리가 완료되었습니다.");
	    } else {
	        ra.addFlashAttribute("message", "휴직처리에 실패했습니다.");
	    }
	    return "redirect:employee/retireList";
	}
	@GetMapping("/retireList")
	public String showRetireList(Model model) {
	    List<EmployeeVO> retireLeaveList = service.retrieveRetireLeaveList();
	    model.addAttribute("retireLeaveList", retireLeaveList);
	    return "tiles:employee/retireList"; 
	}
	
}
