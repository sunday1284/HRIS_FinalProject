package kr.or.ddit.tasks;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;

import kr.or.ddit.annual.service.AnnualHistoryService;
import kr.or.ddit.annual.vo.AnnualHistoryVO;
import kr.or.ddit.attendance.service.AttendanceService;
import kr.or.ddit.attendance.vo.AttendanceVO;
import kr.or.ddit.employee.service.EmployeeService;
import kr.or.ddit.employee.vo.EmployeeVO;
import kr.or.ddit.qr.controller.QrWebSocket;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
public class PrintCurrentTimeTask {
	
	@Autowired
	private QrWebSocket qrWebSocket;
	
	@Autowired
	private AttendanceService Aservice;
	
	@Autowired
	private AnnualHistoryService AHservice;
	
	@Autowired
	private EmployeeService Eservice;
	
	
	/**
	 * 평일 13시까지 출근하지 않고 연차 기록도 없는 사람들의 무단 결근 체크
	 */
	@Scheduled(cron = "00 01 13 * * MON-FRI") // 평일 실행
	public void chcekAttendance() {
		List<AttendanceVO> TodayADList = Aservice.findTodayAttendanceList(); // 오늘 출근한 직원 목록 
		List<AnnualHistoryVO> AHList = AHservice.TotalHisrotyList(); 		 // 오늘 연차인 직원 목록
		List<EmployeeVO> empList = Eservice.readEmpList();
		
		// 둘 다 비어 있으면 무단결근 체크하지 않음 (임시 공휴일 같은날 아무도 출근하지 않고 아무도 연차를 사용하지 않으므로)
	    if (TodayADList.isEmpty() && AHList.isEmpty()) {
	        return; 
	    }
		
		// 오늘 출근한 직원 목록
		Set<String> todayAttendanceSet = new HashSet<>();
		for (AttendanceVO att : TodayADList) {
		    todayAttendanceSet.add(att.getEmpId()); // empId만 저장
		}
		
		//  연차 사용 직원 목록
		Set<String> annualEmpSet = new HashSet<>();
		for (AnnualHistoryVO ah : AHList) {
		    annualEmpSet.add(ah.getEmpId());
		}
		
		// 무단결근 대상 직원 리스트 생성
		List<String> absentEmployees = new ArrayList<>();
		for (EmployeeVO emp : empList) {
		    String empId = emp.getEmpId();
		    
		    // 출근한 직원이거나 연차 사용 직원이면 제외
		    if (!todayAttendanceSet.contains(empId) && !annualEmpSet.contains(empId)) {
		        absentEmployees.add(empId);
		    }
		}
		System.out.println("===================="+absentEmployees.toString());
		//여기부분 해야함 xml에서 한번에 인서트 하는 곳 처리해야함 03/24
		
		if (!absentEmployees.isEmpty()) {
		    Aservice.insertAbsentStatus(absentEmployees);
		    qrWebSocket.broadcastMessage("무단결근자 체크됨");
		}else {
			qrWebSocket.broadcastMessage("무단결근자 없음");
		}
		
	}
	/**
	 * 테스트용
	 */
	@Scheduled(cron = "0 05 10 * * ?")
	public void checkAlarm() {
		 qrWebSocket.broadcastMessage("check 알람알람");
	}
	@Scheduled(cron = "0 50 12 * * ?")
	public void sendDailyAlarm() {
		 qrWebSocket.broadcastMessage("점심은 먹고 합시다 아우 배고파");
	}
	@Scheduled(cron = "00 40 17 * * ?")
	public void leaveWork() {
		 qrWebSocket.broadcastMessage("집에 갑시다 집에 응? 좀 가 ");
	}
	
//	하나의 작업이 끝나면 2초뒤에 시작
//	@Scheduled(initialDelay = 3000, fixedDelay = 2000)
//	Delete 처리할 때 -> 회원 탈퇴 할 떄 유용
//	@Scheduled(cron = "0 0 3 ? * MON")
//	@Scheduled(cron = "0/5 * * * * *")
//	public void printCurrentTime() {
//		LocalDateTime current = LocalDateTime.now();
//		log.info("------------------> {} ", current);
//		service.updateYear(empId);
//	}
//}
}
