<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>
<%@ taglib uri="http://www.springframework.org/security/tags"
	prefix="security"%>
<!--
 * == 개정이력(Modification Information) ==
 *
 *   수정일               수정자           수정내용
 *  ============      ============== =======================
 *  2025-03-12          정태우            최초 생성
 *  2025-03-14          정태우            출근 퇴근 일한시간 삽입
 *  2025-03-17          이영준            security재 설정 세션값 변경
 *  2025-04-02 			최윤식			결재대기함 데이터테이블수정
-->
<style>
.same-size-btn {
    height: 40px;
    padding: 6px 12px;
    font-size: 1rem;
    line-height: 1.5;
}
.color-circle {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    display: inline-block;
    border: 1px solid #ccc;
    vertical-align: middle;
}
/* FullCalendar 제목(예: 2025년 4월) 크기 줄이기 */
.fc .fc-toolbar-title {
  font-size: 16px;     /* ← 원래는 20~24px 정도야. 줄이고 싶으면 16px 이하로! */
  font-weight: 500;    /* 글자 두께 조절 */
}

/* 버튼 텍스트 간격이나 화살표 간격도 조절하고 싶으면 */
.fc .fc-button .fc-icon {
  font-size: 10px;
}

/* FullCalendar 버튼 크기 조절 */
.fc .fc-button {
  padding: 4px 2px;         /* 상하, 좌우 여백 */
  font-size: 12px;          /* 글자 크기 줄이기 */
  height: 28px;             /* 높이 설정 */
  line-height: 1.2;         /* 글자 세로 정렬 */
  border-radius: 4px;       /* 버튼 둥글기 */
}

  #calendar {
    width: 100%;        /* 부모 div 꽉 채우기 */
    height: 480px;      /* 높이 직접 지정 */
    margin: 0 auto;     /* 가운데 정렬 */
  }
  .scrollable-list {
    max-height: 300px;  /* 높이 고정 */
    overflow-y: auto;   /* 내용 많으면 스크롤 */
  }

  .widget-todo {
    height: 570px;       /* 카드 전체 높이 고정 */
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }

  .widget-todo h5 {
    margin-bottom: 1rem;
  }

  .widget-todo .list-group {
    flex-grow: 1;
  }
h4{
text-align: center;
}
.workStatusBtnArea {
  margin-left: 80px;        /* 좌측 여백 자동 */
}
/* 출근 시간 및 퇴근 시간 텍스트에 대한 스타일 */
#startTime, #endTime, #workTime {
  font-size: 18px;
  font-weight: bold;
  color: #25396f; /* 원하는 색상 적용 */
  margin-bottom: 5px;
  margin-left: 20px; /* 왼쪽으로 밀기 위한 여백 추가 */
}

/* 공지사항 및 결재 대기함 스타일 */
.section {
    background: #ffffff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

/* time-info 클래스에 추가 스타일을 줄 수도 있습니다 */
.time-info {
  font-size: 16px;
  color: #34495E;
  padding: 3px 0;
}

.small-chart {
  width: 300px !important;  /* 원하는 너비로 수정 */
  height: 300px !important; /* 원하는 높이로 수정 */
}
/* 시간 정보 스타일 */
.time-info {
	display: block;
	font-size: 16px;
	color: #333; /* 글자색 */
	margin-bottom: 2px;
}

.workDuration {
	font-weight: bold;
}

/* 추가 스타일: 간격과 정렬 */
span {
	display: inline-block;
	margin-left: 20px;
}

.card {
	border-radius: 10px;
	box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
	background-color: #fff;
	padding: 20px;
}

.card-header {
	background-color: #f8f9fa;
	padding: 10px 15px;
	border-bottom: 1px solid #ddd;
	font-weight: bold;
}

.card-body {
	padding: 15px;
}

.time-info {
	font-size: 14px;
	color: #555;
}

.workDuration {
	font-weight: bold;
	color: #333;
}

.btn-outline-info {
	border-radius: 5px;
	font-size: 14px;
	margin-top: 10px;
	padding: 8px;
	border: 1px solid #ddd;
}

tbody {
	white-space: nowrap;
}

.todo-item {
	border: 1px solid #ddd;
	border-radius: 5px;
	padding: 10px;
	margin-bottom: 10px;
}

.todo-title {
    font-size: 1.2rem;
    font-weight: bold;
}

.scrollable-list {
    max-height: 400px; /* 원하는 높이로 조정 (예: 400px) */
    overflow-y: auto;  /* 수직 스크롤바 자동 생성 */
}

    .todo-item {
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 10px;
        margin-bottom: 10px;
    }
    .todo-title {
        font-size: 1.2rem;
        font-weight: bold;
    }
    .todo-date {
        color: #777;
        font-size: 0.9rem;
    }
    .todo-context {
        margin-top: 5px;
    }
    /* 고정 영역: 스크롤해도 움직이지 않도록 sticky 속성 적용 */
    .fixed-todo {
        position: sticky;
        top: 20px; /* 원하는 간격(예: 20px) */
    }
    /* 리스트 영역에 최대 높이를 지정하고 스크롤 가능하도록 할 수 있음 (필요시)
    .scrollable-list {
        max-height: 400px;
        overflow-y: auto;
    }
    */

.todo-title {
	font-size: 1.2rem;
	font-weight: bold;
}

.todo-date {
	color: #777;
	font-size: 0.9rem;
}

.todo-context {
	margin-top: 5px;
}
</style>
<!--근무 시간 차트  -->
<script src="${pageContext.request.contextPath}/resources/js/chart/attantanceChart.js"></script>
<!-- 전자결재 -> 내 문서 차트 -->
<script src="${pageContext.request.contextPath}/resources/js/approval/approverChartStatusCount.js"></script>
<script src="${pageContext.request.contextPath}/resources/js/approval/approverChart.js"></script>

<c:url var="logoutUrl" value="/account/login/logout"/>
<security:authentication property="principal" var="principal" />
<label> 
		<input type="checkbox" id="alarmToggle"> 알림 받기
	</label>

<div id="main" class="layout-horizontal">
	<header class="mb-3">
		<a href="#" class="burger-btn d-block d-xl-none"> <i
			class="bi bi-justify fs-3"></i>
		</a>
	</header>
	<div class="page-content">
		<section class="row">
			<!-- 캘린더 왼쪽 -->
<!-- 			<div class="col-12 col-lg-4"> -->
<!-- 				<div class="card" > -->
<%-- 					<script src="${pageContext.request.contextPath}/resources/fullcalendar-6.1.15/dist/index.global.js"></script> --%>
<!-- 					<div id="calendar"></div> -->
<!-- 				</div> -->
<!-- 			</div> -->



			<div class="col-12 col-lg-3">
				<div class="card" style="height: 570px;">
					<div id="desc">
<!-- 						<div class="color-circle" style="background-color: black;"></div> : <strong style="color: black;">전체일정</strong> -->
						<div class="color-circle" style="background-color: green;"></div> : <strong style="color: green;">개인일정</strong>
					</div>
					<div id="calendar"></div>
				</div>
			</div>


			<div class="col-12 col-lg-3">
			  <div class="card-content pb-4">
			    <div class="card widget-todo">
			      <h5>이번주 내 할 일</h5>
			      <div class="list-group scrollable-list">
			        <c:choose>
			          <c:when test="${not empty scheduleList}">
			            <c:forEach var="schedule" items="${scheduleList}">
			              <fmt:parseDate var="parsedStartDate" value="${schedule.startDate}" pattern="yyyy-MM-dd HH:mm:ss" />
			              <div class="todo-item list-group-item">
			                <div class="todo-title">${schedule.scheduleTitle}</div>
			                <div class="todo-context mt-2">${schedule.scheduleContext}</div>
			              </div>
			            </c:forEach>
			          </c:when>
			          <c:otherwise>
			            <p>등록된 일정이 없습니다.</p>
			          </c:otherwise>
			        </c:choose>
			      </div>
			    </div>
			  </div>
			</div>

			  <!-- 남은 근무 시간만 보여주는 도넛 차트 -->
<!-- 			  <div class="col-12 col-lg-3"> -->
<!-- 			    <div class="container"> -->
<!-- 			      <div class="summary"> -->
<!-- 			        <div class="card"> -->
<!-- 			          <input type="hidden" id="monthRemain"/> -->
<%-- 			          <canvas id="remainchart" class="small-chart" style="height: 300px;"></canvas> --%>
<!-- 			        </div> -->
<!-- 			      </div> -->
<!-- 			    </div> -->
<!-- 			  </div> -->
<!-- 			</div> -->


		<input type="hidden" value="${employee.empId}" id="empId" />
			<div class="col-12 col-lg-3">
				<div class="container">
				    <div class="summary">
						<div class="card" style="height:570px; display: flex; justify-content: center; align-items: center;">
						    <input type="hidden" id="monthTotal"/>
						    <canvas id="totalchart" style="width: 300px; height: 300px;"></canvas>
						</div>
				    </div>
				</div>
			</div>

<!-- 상대 경로 추출 -->
<c:set var="fullPath" value="${employee.empPath}" />
<c:set var="startIndex" value="${fn:indexOf(fullPath, 'fileImages')}" />
<c:set var="cutStart" value="${startIndex + 10}" />
<c:set var="cutEnd" value="${fn:length(fullPath)}" />
<c:set var="fileName" value="${fn:substring(fullPath, cutStart, cutEnd)}" />
<c:set var="webPath" value="/resources/fileImages/${fileName}" />

			<!-- 캘린더 오른쪽 (프로필 정보) -->
			<div class="col-12 col-lg-3">
				<div class="card">
					<div class="card-body py-4 px-5">
						<div class="d-flex align-items-center">
							<div class="avatar avatar-xl">
								<img
									src="${pageContext.request.contextPath}${webPath}"
									alt="직원 프로필">
							</div>
							<div class="ms-3 name">
								<h6>${principal.realUser.department.departmentName}<br>
									${principal.realUser.employee.team.teamName}</h6>
								<h5 class="text-muted mb-0">${principal.realUser.empName }
									${principal.realUser.rank.rankName }</h5>

								<a href="${logoutUrl}" id="logoutLink">로그아웃</a>
							</div>
						</div>
					</div>
				</div>
				<div class="card">
					<div class="card-header">
						<h4>나의 근태</h4>
					</div>
						<h6>
							<span id="time"></span>
						</h6>
						<c:if test="${not empty sessionAccount.attendance}">
							<c:forEach items="${sessionAccount.attendance}" var="attendance">
								<span id="startTime" class="time-info">출근 시간: <strong>${attendance.workStartTime}</strong></span>
								<br />
								<span id="endTime" class="time-info">퇴근 시간: <strong>${attendance.workEndTime}</strong></span>
								<br />
								<span id="workTime">일한 시간:
								<span class="workDuration"
									data-workstart="${attendance.workStartTime}"
									data-workend="${attendance.workEndTime}"> </span>
								</span>
								<br />
							</c:forEach>
						</c:if>
						<c:if test="${empty sessionAccount.attendance}">
							<span id="startTime">출근 시간 </span>
							<br />
							<span id="endTime">퇴근 시간 </span>
							<br />
							<span id="workTime">일한 시간 </span>
							<br />
						</c:if>
							<svg width="100%" height="5">
							  <line x1="0" y1="2.5" x2="100%" y2="2.5" stroke="#ccc" stroke-dasharray="4,4"/>
							</svg>

					<div class="workStatusBtnArea" style="margin: auto;">
					    <a class="btn btn-outline-info same-size-btn"
					        href="${pageContext.request.contextPath}/generate-qr"
					        data-bs-toggle="modal" data-bs-target="#exampleModal__">출/퇴QR</a>

					    <select id="workStatusSelect" name="workStatus"
					        onchange="updateWorkStatus()"
					        class="btn btn-outline-info same-size-btn">
					        <c:forEach items="${workStatusList}" var="workStatusVO">
					            <c:if test="${workStatusVO.statusPos eq 'Y'}">
					                <option value="${workStatusVO.statusId}"
					                    ${workStatusVO.statusId eq workStatus.statusId ? 'selected' : ''}
					                    ${workStatus.statusId eq 'STAT_03' && workStatusVO.statusId ne 'STAT_03' ? 'disabled' : ''}>
					                    ${workStatusVO.statusName}
					                </option>
					            </c:if>
					        </c:forEach>
					    </select>
					</div>
				</div>
			</div>
		</section>

		<section class="row">
			<!-- 게시판 (왼쪽) -->
			<div class="col-12 col-lg-5">
				<section class="section">
						<div class="card-header">
							<h4 class="card-title">
								<a href="${pageContext.request.contextPath }/board/list"
									class="text-decoration-none text-grey">공지사항</a>
							</h4>
						</div>
						<div class="card-body">
							<div class="list-group scrollable-list">
								<!-- 데이터 테이블을 가로 스크롤 가능하게 만들기 -->
								<div class="table-responsive" style="max-width: 100%; overflow-x: auto;">
									<table id="table1" class="table table-striped datatable">
										<thead>
											<tr>
												<th data-sortable=""><a href="#"
													class="dataTable-sorter">제목</a></th>
												<th data-sortable=""><a href="#"
													class="dataTable-sorter">작성일</a></th>
											</tr>
										</thead>
										<tbody>
											<c:choose>
												<c:when test="${not empty boardList}">
													<c:forEach items="${boardList}" var="board">
														<tr>
															<td><a href="javascript:void(0);"
																onclick="navigateToDetail('${board.noticeId}')">${board.title}</a>
															</td>
															<td>${board.createdAt}</td>
														</tr>
													</c:forEach>
												</c:when>
												<c:otherwise>
													<tr>
														<td colspan="6">공지글 없음.</td>
													</tr>
												</c:otherwise>
											</c:choose>
										</tbody>
									</table>
								</div>
							</div>
						</div>
				</section>
			</div>

			<!-- 게시판 오른쪽 (appoverProcess.jsp) -->
			<div class="col-12 col-lg-7">
				<section class="section" style="height: 520px;">
						<div class="card-header">
							<h4 class="card-title">
								<a href="${pageContext.request.contextPath }/approval/templateList">전자결재</a>
							</h4>
						</div>
						<div class="card-body">
						  <div class="row">
						    <!-- 문서 상태 차트 -->
						    <div class="col-md-6">
						    <div class="data-visualization">
						      <div class="chart-container" style="width: 100%; height: 350px;">
						        <h4 class="text-center mb-3">기안 문서 </h4>
						        <canvas id="statusChart" style="width: 100%; height: 100%;"></canvas>
						        </div>
						      </div>
						    </div>
						    <!-- 결재 상태 차트 -->
						    <div class="col-md-6">
						      <div class="data-visualization">
						      <div class="chart-container" style="width: 100%; height: 350px;">
						        <h4 class="text-center mb-3">결재 문서</h4>
						        <canvas id="statusApprChart" style="width: 100%; height: 100%;"></canvas>
						        </div>
						      </div>
						    </div>
						  </div>
						</div>

						</section>
						</div>
				</section>
			</div>
		</section>
	</div>
</div>

<!-- Modal -->
<div class="modal fade" id="exampleModal__" tabindex="-1"
	aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h1 class="modal-title fs-5" id="exampleModalLabel">출퇴근 QR</h1>
				<button type="button" class="btn-close" data-bs-dismiss="modal"
					aria-label="Close"></button>
			</div>
			<div class="modal-body"></div>
		</div>
	</div>
</div>

<!-- 투두리스트 할 일 추가 모달 창 -->
<div class="modal fade" id="taskModal" tabindex="-1"
	aria-labelledby="taskModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="taskModalLabel">할 일 추가</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal"
					aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<div class="form-group">
					<label for="taskInput" class="form-label">할 일 입력</label>
					<textarea class="form-control" id="taskInput" rows="3"></textarea>
				</div>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary"
					data-bs-dismiss="modal">닫기</button>
				<button type="button" class="btn btn-primary" id="saveTask">저장</button>
			</div>
		</div>
	</div>
</div>

<!-- Simple DataTables 스크립트 -->
<script
	src="${pageContext.request.contextPath}/resources/js/content/appMain.js"></script>
<script
	src="https://cdn.jsdelivr.net/npm/sockjs-client@1/dist/sockjs.min.js"></script>
<script
	src="https://cdn.jsdelivr.net/npm/sockjs-client@1/dist/sockjs.min.js"></script>
<script
	src="https://cdn.jsdelivr.net/npm/stompjs@2.3.3/lib/stomp.min.js"></script>
<script
	src="${pageContext.request.contextPath}/resources/js/qr/qrModal.js"></script>
<script
	src="${pageContext.request.contextPath}/resources/js/content/updateTime.js"></script>
<script
	src="${pageContext.request.contextPath}/resources/js/content/updateWorkedTime.js"></script>
<script
	src="${pageContext.request.contextPath}/resources/js/qr/qrWorkStatusUpdate.js"></script>
<script
	src="${pageContext.request.contextPath}/resources/js/test.js"></script>
<script>
	var empId = '${principal.realUser.empId}'; //로그인한 사원의 Id
	var logoutUrl = '${logoutUrl}';
	console.log("empId",empId)
   //페이지가 로드되면 시간을 업데이트하고, 1초마다 갱신
   window.onload = function() {
      updateTime();
      updateWorkedTime();   // 페이지 로드 시 바로 실행
      setInterval(updateTime, 1000); // 1초마다 시간 갱신
      setInterval(updateWorkedTime, 1000);
      connectAndSendStatus();
   };

   function navigateToDetail(postId) {
       console.log("Navigating to detail with noticeId:", postId); // 로그 추가
       window.location.href = "${pageContext.request.contextPath}/board/detail?noticeId=" + postId;
   }

   function updateWorkStatus() {
		var statusId = $('#workStatusSelect').val();  // 선택된 상태 ID
		$.ajax({
			url: '/workstauts/updateWorkStatus',  // 서버의 URL
			type: 'POST',
			data: {
				statusId: statusId,
				empId: empId,
				workDate: workDate
			},
			success: function(response) {
				alert('업데이트 성공');
			},
			error: function() {
				alert('업데이트 실패');
			}
		});
	}
   let stompClient = null;

   function connectAndSendStatus() {
       const socket = new SockJS('/wss');
       stompClient = Stomp.over(socket);

       stompClient.connect({}, function(frame) {
           console.log('🟢 WebSocket 연결됨 (로그인 상태 알림용)', frame);

           // 온라인 상태 서버에 전송
           stompClient.send("/app/status", {}, JSON.stringify({
               empId: empId,
               status: "온라인"
           }));
       });
   }


   // 2) 로그아웃 링크 클릭 핸들러
   $('#logoutLink').on('click', function(e){
     e.preventDefault();
     // 오프라인 상태 전송
     if (stompClient) {
       stompClient.send("/app/status", {}, JSON.stringify({
         empId: empId,
         status: "오프라인"
       }));
     }
     // 실제 로그아웃 이동
     setTimeout(function(){
       window.location.href = logoutUrl;
     }, 300);
   });

   var scheduleList = [];
   <c:if test="${not empty scheduleList}">
       <c:forEach items="${scheduleList}" var="x">
           scheduleList.push({
               empId: "${x.empId}",
               scheduleTitle: "${x.scheduleTitle}",
               scheduleContext: "${x.scheduleContext}",
               startDate: "${x.startDate}",
               endDate: "${x.endDate}",
               scheduleVisibility: "${x.scheduleVisibility}",
               colorCode: "${x.colorCode}"
           });
       </c:forEach>
   </c:if>;
</script>

<!-- TodoList JS -->
<script>
$(document).ready(function(){
    var drake = dragula([document.getElementById("todoList")]);

    loadTasks(); // ✅ 페이지 로드 시 저장된 데이터 불러오기

    $('#addTaskBtn').click(function(){
        $('#taskModal').modal('show');
    });

    $('#saveTask').click(function(){
        var taskText = $('#taskInput').val().trim();
        if(taskText) {
            addTaskToList(taskText);
            saveTasks(); // ✅ 할 일 저장
            $('#taskInput').val("");
            $('#taskModal').modal('hide');
        }
    });

    $('#todoList').on('change', 'input[type="checkbox"]', function(){
        if(this.checked){
            $(this).closest('li').fadeOut(function(){
                $(this).remove();
                saveTasks(); // ✅ 삭제 후 저장
            });
        }
    });

    function addTaskToList(taskText) {
        var newTask = $('<li class="list-group-item d-flex align-items-center"></li>');
        var listIcon = $('<i data-feather="list" class="cursor-move me-2" style="font-size: 20px;"></i>');

        var checkbox = $('<input type="checkbox" class="form-check-input me-2">');
        var label = $('<span></span>').text(taskText);

        newTask.append(listIcon).append(checkbox).append(label);
        $('#todoList').append(newTask);
        feather.replace();

        drake.destroy();
        drake = dragula([document.getElementById("todoList")]);
    }

    function saveTasks() {
        let tasks = [];
        $("#todoList li").each(function() {
            let text = $(this).find("span").text();
            tasks.push(text);
        });
        localStorage.setItem("todoTasks", JSON.stringify(tasks));
    }

    function loadTasks() {
        let savedTasks = localStorage.getItem("todoTasks");
        if (savedTasks) {
            savedTasks = JSON.parse(savedTasks);
            savedTasks.forEach(task => {
                addTaskToList(task);
            });
        }
    }
});
</script>


<script>
document.addEventListener('DOMContentLoaded', function() {

    var scheduleList = [];
    <c:if test="${not empty scheduleList}">
        <c:forEach items="${scheduleList}" var="x">
            scheduleList.push({
            	scheduleId : "${x.scheduleId}",
                empId: "${x.empId}",
                empName : "${x.empName}",
                scheduleTitle: "${x.scheduleTitle}",
                scheduleContext: `${x.scheduleContext}`,
                startDate: "${x.startDate}",
                endDate: "${x.endDate}",
                scheduleVisibility: "${x.scheduleVisibility}",
                colorCode: "${x.colorCode}"
            });
        </c:forEach>
    </c:if>;

 	// 저장시 Title, desc 널값 방지
    document.querySelector("#insertButton")?.addEventListener("click", function() {
    	    // 입력값 가져오기
    	    const title = document.getElementById("inputTitle").value.trim();
    	    const desc = document.getElementById("inputDescription").value.trim();

    	    // 널값 검사
    	    if (!title || !desc ) {
    	        alert("제목과 설명을 입력해주세요.");
    	        return;
    	    }
    	    // 유효성 통과 시 폼 submit
    	    document.getElementById("scheduleForm").submit();
    });

    // 일정 등록화면에서 일정변경 함수
    document.querySelector("#inputEndDate")?.addEventListener("change", function() {
    	 let startDate = document.querySelector("#inputStartDate");
 	    let endDate = document.querySelector("#inputEndDate");
 	   var start = new Date(startDate.value);
	    var end = new Date(endDate.value);
	    var currentDate = new Date(start);


	    if (currentDate > end) {
	        alert("종료일이 시작일보다 빠를 수 없습니다.");
	        return;
	    }
    });

    let now = new Date();
    let formattedDate = now.toISOString().split('T')[0];

    var calendarEl = document.getElementById('calendar');

    var calendar = new FullCalendar.Calendar(calendarEl, {

    	 locale: 'ko', // 한국어
    	dateClick: function(info) {
    	    var clickedDate = info.dateStr;

    	    // 클릭한 날짜에 해당하는 일정들을 필터링
    	    var filteredSchedules = scheduleList.filter(function(event) {
    	        var eventStartDate = new Date(event.startDate);
    	        var eventEndDate = new Date(event.endDate);
    	        var clickedDateObj = new Date(clickedDate);
    	        return eventStartDate.toDateString() === clickedDateObj.toDateString();
    	    });

    	    // 날짜를 동적으로 삽입하기 위해 모달 내 p 태그를 생성
    	    var modalDate = document.getElementById('modalDate');
    	    modalDate.innerHTML = `날짜: \${clickedDate}`;

    	    // 일정 리스트 추가
    	    var scheduleListContainer = document.getElementById('scheduleList');
    	    scheduleListContainer.innerHTML = ''; // 이전 리스트를 비운다

    	    if (filteredSchedules.length > 0) {
    	        filteredSchedules.forEach(function(schedule) {
    	            var listItem = document.createElement('li');
    	            listItem.classList.add('list-group-item');
    	            listItem.innerHTML = `
    	                <div class="schedule-item">
    	                    <div class="schedule-header">
    	                        <span class="schedule-empName">\${schedule.empName}</span>
    	                        <span class="schedule-title">\${schedule.scheduleTitle}</span>
    	                    </div>
    	                    <div class="schedule-details">
    	                        <div class="schedule-context">\${schedule.scheduleContext}</div>
    	                    </div>
    	                    <div class="schedule-dates">
    	                        <div class="schedule-dates-wrapper">
    	                            <span class="schedule-startDate">
    	                                <i class="fas fa-calendar-day"></i> \${schedule.startDate}
    	                            </span>
    	                            <span class="schedule-endDate">
    	                                <i class="fas fa-calendar-alt"></i> \${schedule.endDate}
    	                            </span>
    	                        </div>
    	                    </div>
    	                </div>
    	            `;
    	            scheduleListContainer.appendChild(listItem);
    	        });
    	    } else {
    	        scheduleListContainer.innerHTML = '<li class="list-group-item">이 날짜에는 일정이 없습니다.</li>';
    	    }

    	    let startDate = document.querySelector("#inputStartDate");
    	    let endDate = document.querySelector("#inputEndDate");

			startDate.value = `\${clickedDate}T09:00`;
			endDate.value = `\${clickedDate}T18:00`;


    	    var start = new Date(startDate.value);
    	    var end = new Date(endDate.value);
    	    var currentDate = new Date(start);

    	    // 클릭한 날짜가 종료일 전인지 확인
    	    if (currentDate > end) {
    	        alert("종료일이 시작일보다 빠를 수 없습니다.");
    	        return;
    	    }

    	    // 클릭된 날짜를 기준으로 여러 날짜에 대해 일정 추가
    	    var currentDate = new Date(startDate);
    	    while (currentDate <= end) {
    	        let currentFormattedDate = currentDate.toISOString().split('T')[0];

    	        // 색상 선택에 따른 색상 코드 설정
    	        let visibility = document.querySelector("#inputVisibility").value;
    	        let colorCode = visibility === 'P' ? '#000000' : '#2A9D8F';  // P와 D에 맞는 색상 설정
    	        // 이벤트 객체 추가
    	        scheduleList.push({
    	            scheduleId: new Date().getTime(),  // unique scheduleId
    	            empId: "${principal.realUser.empId}",
    	            scheduleTitle: document.getElementById('inputTitle').value,
    	            scheduleContext: document.getElementById('inputDescription').value,
    	            startDate: currentFormattedDate + 'T00:00',
    	            endDate: currentFormattedDate + 'T23:59',
    	            scheduleVisibility: visibility,
    	            colorCode: colorCode
    	        });

    	        // 날짜를 하루씩 증가
    	        currentDate.setDate(currentDate.getDate() + 1);
    	    }

    	    // 캘린더에 이벤트 추가
    	    calendar.addEventSource(scheduleList);

    	    // 모달 띄우기
    	    var myModal = new bootstrap.Modal(document.getElementById('exampleModal__'));
    	    myModal.show();
    	},

    	headerToolbar: {
    		  left: '',         // ← 이전/다음/오늘 버튼 없애기
    		  center: 'title',  // ← "2025년 4월" 같은 제목만 중앙에 표시
    		  right: ''         // ← 보기 선택 버튼(월/주/일) 없애기
    		},

        initialDate: formattedDate,
        navLinks: true,
        editable: true,
        dayMaxEvents: true,
        events: scheduleList
        .filter(event => {
            const loggedInEmpId = '${principal.realUser.empId}';
            if (event.scheduleVisibility === 'P') return true;
            return event.empId === loggedInEmpId; //일정 상태가 D일 경우 작성자 달력에만 일정이 뜸
        }).map(event => ({
        	empId : event.empId,
        	scheduleId : event.scheduleId,
            title: event.scheduleTitle,
            empName : event.empName,
            start: event.startDate,
            end: event.endDate,
            description: event.scheduleContext,
            backgroundColor: event.scheduleVisibility === 'P' ? 'black' : 'green',   // P -> black, D -> green
            borderColor: event.scheduleVisibility === 'P' ? 'black' : 'green',
            scheduleVisibility: event.scheduleVisibility
        })),
        eventTimeFormat: {
            hour: '2-digit',
            minute: '2-digit',
            hour12: false
        },
        // 일정을 드래그해서 일정을 변경 기존 데이터들은 그대로 가져가고 일자만 바뀜
        eventDrop:function(info){
        	// 변경된 시작일과 종료일 추출
            let updatedStartDate = info.event.start.toLocaleString('sv-SE').slice(0, 16);
            let updatedEndDate = info.event.end.toLocaleString('sv-SE').slice(0, 16);
            let empId = info.event.extendedProps.empId;
            let title = info.event.title;
            let description = info.event.extendedProps.description;
            let scheduleVisibility = info.event.extendedProps.scheduleVisibility;
            const loggedInEmpId = '${principal.realUser.empId}';

            console.log(empId)
            console.log(loggedInEmpId)
            if (empId !== loggedInEmpId) {
            	// 본인이 아니면 일정 수정 불가
            	alert("남의 일정은 변경할 수 없습니다")
                window.location.reload();
            	return;
            }

            // 서버에 전달할 데이터 준비 (이벤트 ID, 시작일, 종료일)
            let updatedEventData = {
                scheduleId: info.event.extendedProps.scheduleId,  // 일정 ID
                startDate: updatedStartDate,
                endDate: updatedEndDate,
                empId:empId,
                scheduleTitle:title,
                scheduleContext:description,
                scheduleVisibility:scheduleVisibility
            };
			console.log(updatedEventData)

            // Ajax로 서버에 데이터 전송 (일정 업데이트)
            $.ajax({
                url: "/schedule/update",  // 서버에서 처리할 URL (수정된 일정을 처리할 URL)
                type: "POST",             // POST 방식
                data: updatedEventData,   // 변경된 시작일과 종료일 데이터를 전송
                dataType: "json",         // 응답을 JSON으로 처리
                success: function(response) {
                    window.location.reload();
                },
                error: function(xhr, status, error) {
                    console.error(error);  // 에러 출력
                    alert("일정을 업데이트하는 데 문제가 발생했습니다.");
                    window.location.reload();
                }
            });

        },
        //일정을 클릭하면 수정/삭제 할 수 있는 모달 창
        eventClick: function(info) {
            // 모달에 클릭된 이벤트 정보 채우기
            document.getElementById('editTitle').value = info.event.title;
            document.getElementById('editDescription').value = info.event.extendedProps.description || '';
            document.getElementById('editStartDate').value = info.event.start.toLocaleString('sv-SE').slice(0, 16);
            document.getElementById('editEndDate').value = info.event.end.toLocaleString('sv-SE').slice(0, 16);
            document.getElementById('updateVisibility').value = info.event.extendedProps.scheduleVisibility;
            document.getElementById('editScheduleId').value = info.event.extendedProps.scheduleId;
            const empId =  document.getElementById('editEmpId').value = info.event.extendedProps.empId;
            const loggedInEmpId = '${principal.realUser.empId}';

            if (empId === loggedInEmpId) {
                // 본인일 경우에만 버튼 보이게
                document.querySelector('#saveButton').style.display = 'inline-block';
                document.querySelector('#deleteEventButton').style.display = 'inline-block';
            } else {
                // 본인이 아니면 숨김
                document.querySelector('#saveButton').style.display = 'none';
                document.querySelector('#deleteEventButton').style.display = 'none';
            }

            // 수정/삭제 모달을 띄운다
            var myModal = new bootstrap.Modal(document.getElementById('editDeleteModal'));
            myModal.show();

            // 수정 폼 제출 시 일정 수정
            let updateForm = document.getElementById('editForm');

            // 수정된 폼 데이터를 폼 필드에 반영한 후 FormData를 생성해야 합니다
            updateForm.onsubmit = function(e) {
                e.preventDefault();
 				let formData = new FormData(updateForm);

                // Ajax로 서버에 수정된 데이터 전송
                $.ajax({
                    url: updateForm.action,  // 폼의 action을 사용
                    type: "post",            // POST 방식
                    data: formData,          // FormData를 전송
                    processData: false,      // jQuery가 데이터를 처리하지 않도록 설정 (FormData는 이미 처리됨)
                    contentType: false,      // jQuery가 content-type을 설정하지 않도록 설정 (FormData는 이미 설정됨)
                    dataType: "json",        // 응답 데이터를 JSON으로 처리
                    success: function(data) {
                    	window.location.reload();
                    },
                    error: function() {
                        alert("데이터를 불러오는 중 오류가 발생했습니다.");
                    }
                });

                // 수정된 값으로 이벤트 업데이트
                info.event.setProp('title', document.getElementById('editTitle').value);
                info.event.setStart(document.getElementById('editStartDate').value);
                info.event.setEnd(document.getElementById('editEndDate').value);
                info.event.setExtendedProp('description', document.getElementById('editDescription').value);

                // 수정된 공개 범위에 맞는 색상 반영
                var visibility = document.getElementById('updateVisibility').value;
                var color = visibility === 'P' ? 'blue' : 'green';
                info.event.setProp('backgroundColor', color);
                info.event.setProp('borderColor', color);

                myModal.hide();
            };

            // 삭제 버튼 클릭 시
            document.getElementById('deleteEventButton').onclick = function() {

                let formData = new FormData(updateForm);

                // 삭제 확인 모달 먼저 띄우기
                Swal.fire({
                    title: '정말 삭제하시겠습니까?',
                    text: "삭제된 일정은 복구할 수 없습니다.",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: '삭제',
                    cancelButtonText: '취소'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // 유저가 '삭제' 누르면 AJAX 요청
                        $.ajax({
                            url: "/schedule/delete",
                            type: "post",
                            data: formData,
                            processData: false,
                            contentType: false,
                            dataType: "json",
                            success: function(data) {
                                // 캘린더에서 이벤트 삭제
                                info.event.remove();

                                // 모달 닫기
                                myModal.hide();

                                // ✅ SweetAlert2로 성공 알림
                                Swal.fire({
                                    icon: 'success',
                                    title: '삭제 완료',
                                    text: '일정이 성공적으로 삭제되었습니다.',
                                    timer: 1500,
                                    showConfirmButton: false
                                });
                            },
                            error: function() {
                                Swal.fire({
                                    icon: 'error',
                                    title: '오류 발생',
                                    text: '삭제 중 문제가 발생했습니다.'
                                });
                            }
                        });
                    }
                });
            };
        }
    });

    calendar.render();
});
const toggle = document.getElementById("alarmToggle");

//저장된 설정 반영
toggle.checked = localStorage.getItem("alarmEnabled") === "true";

//체크박스 변경될 때마다 저장
toggle.addEventListener("change", function () {
 localStorage.setItem("alarmEnabled", this.checked);
});
</script>
