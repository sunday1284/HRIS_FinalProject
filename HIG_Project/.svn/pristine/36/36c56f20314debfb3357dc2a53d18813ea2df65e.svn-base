/**
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *   수정일      			수정자           수정내용
 *  -----------   	-------------    ---------------------------
 * 2025. 4. 2.     	KHS            최초 생성
 *
 * </pre>
 */
// organization.js

// 현재 월을 설정하는 함수
function updateMonth(monthOffset) {
    let today = new Date();
    let year = today.getFullYear();  // 예: 2025
    let month = (today.getMonth() + 1).toString().padStart(2, '0'); // 예: "04"
    console.log(year, month);

    // currentMonth 요소의 텍스트를 현재 년.월 형식으로 업데이트
    document.getElementById('currentMonth').innerText = `${year}.${month}`;

    // 테이블 생성 및 요약 업데이트
    generateTables(year, month);
    updateSummary(year, month);
}

// 월 변경 이벤트 처리 함수
function changeMonth(offset) {
    let currentMonthText = document.getElementById('currentMonth').innerText;
    let currentDate = new Date(currentMonthText + "-01");  // 예: "2025.03" → "2025.03-01" (날짜 형식에 주의)

    currentDate.setMonth(currentDate.getMonth() + offset);  // 한 달 이동

    let year = currentDate.getFullYear();
    let month = (currentDate.getMonth() + 1).toString().padStart(2, '0');
    document.getElementById('currentMonth').innerText = `${year}.${month}`;

    let ym = `${year}-${month}`;

    let empId = document.querySelector("#empId").value;
    console.log(empId);
    console.log(ym);

    $.ajax({
        url: '/myAttendance',
        type: 'GET',
        dataType: "json",
        data: { workDate: ym, empId: empId },
        success: function(data) {
            console.log(data.myAttendance);
            // myAttendance는 전역 변수에 업데이트 (데이터 형식은 배열이어야 함)
            window.myAttendance = data.myAttendance;
            generateTables(year, month); // 테이블 갱신
            updateSummary(year, month);  // 요약 갱신
        },
        error: function(xhr, status, error) {
            console.error("데이터 로딩 실패:", error);
        }
    });
}

// 날짜에 따라 테이블 생성 함수
function generateTables(year, month) {
    let leftContainer = document.getElementById('weekLeft').querySelector('tbody');
    let rightContainer = document.getElementById('weekRight').querySelector('tbody');

    leftContainer.innerHTML = "";
    rightContainer.innerHTML = "";

    // myAttendance가 전역 변수에 이미 설정되어 있다고 가정 (JSP에서 전달)
    // 필터: workDate가 "YYYY-MM"으로 시작하는 데이터만
    let filteredData = window.myAttendance
        .filter(x => x.workDate.startsWith(`${year}-${month}`))
        .sort((a, b) => a.workDate.localeCompare(b.workDate)); // 날짜순 정렬

    filteredData.forEach(x => {
        let day = parseInt(x.workDate.substring(8)); // 예: "2025-03-15" → 15
        let tableRow = createTableRow(x);

        if (day <= 15) {
            leftContainer.innerHTML += tableRow; // 1~15일은 왼쪽 테이블
        } else {
            rightContainer.innerHTML += tableRow; // 16일 이후는 오른쪽 테이블
        }
    });
}

// 근무 시간, 초과 시간, 잔여 시간 등 요약 정보를 업데이트하는 함수
function updateSummary(year, month) {
    let totalSeconds = 0;
    let totalWeekdays = getWeekdaysInMonth(year, month);
    let targetWorkSeconds = totalWeekdays * 8 * 3600; // 평일 * 8시간 * 초 단위

    window.myAttendance.forEach(x => {
        if (x.workDate.startsWith(`${year}-${month}`)) {
            let totalMinutes = (parseInt(x.workingHours) || 0) * 60 + (parseInt(x.workingMinutes) || 0);
            totalSeconds += totalMinutes * 60; // 분을 초로 변환
        }
    });

    function formatTime(seconds) {
        let h = Math.floor(seconds / 3600);
        let m = Math.floor((seconds % 3600) / 60);
        let s = seconds % 60;
        return `${h}h ${m}m ${s}s`;
    }

    let overtimeSeconds = Math.max(totalSeconds - targetWorkSeconds, 0);
    let remainSeconds = Math.max(targetWorkSeconds - totalSeconds, 0);

    document.getElementById("monthTotal").innerText = formatTime(totalSeconds);
    document.getElementById("monthOvertime").innerText = formatTime(overtimeSeconds);
    document.getElementById("monthRemain").innerText = formatTime(remainSeconds);
}

// 이번 달 평일 개수를 계산하는 함수
function getWeekdaysInMonth(year, month) {
    let count = 0;
    let daysInMonth = new Date(year, month, 0).getDate(); // 해당 월의 총 일수

    for (let day = 1; day <= daysInMonth; day++) {
        let date = new Date(year, month - 1, day); // month는 0부터 시작
        let dayOfWeek = date.getDay(); // 0:일 ~ 6:토
        if (dayOfWeek >= 1 && dayOfWeek <= 5) { // 월~금
            count++;
        }
    }
    return count;
}

// 각 날짜에 대해 테이블 행을 생성하는 함수
function createTableRow(x) {
    let workStartTime = x.workStartTime ? x.workStartTime.substring(0, 5) : 'N/A';
    let workEndTime = x.workEndTime ? x.workEndTime.substring(0, 5) : 'N/A';
    let workDate = x.workDate ? x.workDate.substring(8) : 'N/A';
    let workingHours = x.workingHours || '0';
    let workingMinutes = x.workingMinutes || '0';
    let overtimeHours = x.overtimeHours || '0';
    let overtimeMinutes = x.overtimeMinutes || '0';
    let nightWorkHours = x.nightWorkHours || '0';
    let nightWorkMinutes = x.nightWorkMinutes || '0';

    let NumworkingHours = parseInt(x.workingHours) || 0;
    let NumovertimeHours = parseInt(x.overtimeHours) || 0;
    let NumnightWorkHours = parseInt(x.nightWorkHours) || 0;
    let NumworkingMinutes = parseInt(x.workingMinutes) || 0;
    let NumovertimeMinutes = parseInt(x.overtimeMinutes) || 0;
    let NumnightWorkMinutes = parseInt(x.nightWorkMinutes) || 0;

    let totalMinutes = (NumworkingHours + NumovertimeHours + NumnightWorkHours) * 60 +
                       (NumworkingMinutes + NumovertimeMinutes + NumnightWorkMinutes);
    let totalHours = Math.floor(totalMinutes / 60);
    let totalResultinutes = totalMinutes % 60;

    return `
        <tr>
            <td>${workDate}</td>
            <td>${workStartTime}</td>
            <td>${workEndTime}</td>
            <td>${totalHours}시간 ${totalResultinutes}분</td>
            <td>기본 ${workingHours}시간 ${workingMinutes}분 / 연장 ${overtimeHours}시간 ${overtimeMinutes}분 / 야간 ${nightWorkHours}시간 ${nightWorkMinutes}분</td>
        </tr>
    `;
}

// 초기 페이지 로드 시 현재 월을 업데이트하고 테이블을 생성
document.addEventListener('DOMContentLoaded', function() {
    updateMonth(0);  // 현재 월로 초기화
});













// dualDonutChart.js

// 현재 날짜를 기준으로 이번 달과 이번 주 근무시간(시간 단위)을 계산하여 이중 도넛 차트를 생성하는 함수
function createDualDonutChart() {
    // 현재 날짜 정보
    let currentDate = new Date();
    let currentYear = currentDate.getFullYear();
    let currentMonth = (currentDate.getMonth() + 1).toString().padStart(2, '0');

    // 이번 달 데이터 필터링: workDate가 "YYYY-MM"으로 시작하는 데이터
    let monthData = window.myAttendance.filter(item => item.workDate.startsWith(`${currentYear}-${currentMonth}`));

    // 이번 달 총 근무 시간을 초 단위로 계산
    let monthTotalSeconds = 0;
    monthData.forEach(item => {
        let hours = parseInt(item.workingHours) || 0;
        let minutes = parseInt(item.workingMinutes) || 0;
        monthTotalSeconds += hours * 3600 + minutes * 60;
    });
    let monthHours = parseFloat((monthTotalSeconds / 3600).toFixed(1));

    // 이번 주의 시작(월요일)과 종료(일요일) 날짜 계산
    let weekRange = getCurrentWeekRange();
    // 이번 주 데이터 필터링
    let weekData = window.myAttendance.filter(item => {
        let workDate = new Date(item.workDate);
        return workDate >= weekRange.start && workDate <= weekRange.end;
    });
    let weekTotalSeconds = 0;
    weekData.forEach(item => {
        let hours = parseInt(item.workingHours) || 0;
        let minutes = parseInt(item.workingMinutes) || 0;
        weekTotalSeconds += hours * 3600 + minutes * 60;
    });
    let weekHours = parseFloat((weekTotalSeconds / 3600).toFixed(1));

    // 외부 데이터: 이번 달 나머지 근무시간 = 전체 월 근무시간 - 이번 주 근무시간
    let restHours = parseFloat((monthHours - weekHours).toFixed(1));
    if (restHours < 0) restHours = 0;

    // 두 데이터셋을 사용하여 이중 도넛 차트를 생성 (inner ring: 이번 주, outer ring: 나머지)
    let ctx = document.getElementById('dualDonutChart').getContext('2d');
    new Chart(ctx, {
        type: 'doughnut',
        data: {
            labels: ['이번 주', '나머지'],
            datasets: [
                // 내부 링 (얇은 링): 이번 주 근무시간과 이번 달 나머지
                {
                    data: [weekHours, restHours],
                    backgroundColor: ['#FF5733', '#EEEEEE'], // 예: 빨강과 밝은 회색
                    hoverOffset: 4,
                    weight: 0.5
                },
                // 외부 링 (두꺼운 링): 전체 이번 달 근무시간 (배경 역할)
                {
                    data: [monthHours],
                    backgroundColor: ['#3357FF'], // 예: 파랑
                    hoverOffset: 4,
                    weight: 1
                }
            ]
        },
        options: {
            responsive: true,
            plugins: {
                legend: { position: 'bottom' },
                title: {
                    display: true,
                    text: '내 근무시간 (시간 단위)'
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            let label = context.datasetIndex === 0
                                ? context.label || ''
                                : '전체 이번 달';
                            let value = context.raw || 0;
                            return `${label}: ${value} 시간`;
                        }
                    }
                }
            }
        }
    });
}

// 현재 주의 시작(월요일)과 종료(일요일)을 반환하는 함수
function getCurrentWeekRange() {
    let now = new Date();
    let day = now.getDay(); // 0: 일요일 ~ 6: 토요일
    // 월요일을 주의 시작으로 계산 (일요일은 0이므로, if(day === 0) 처리)
    let diffToMonday = now.getDate() - day + (day === 0 ? -6 : 1);
    let monday = new Date(now.setDate(diffToMonday));
    monday.setHours(0, 0, 0, 0);

    let sunday = new Date(monday);
    sunday.setDate(monday.getDate() + 6);
    sunday.setHours(23, 59, 59, 999);

    return { start: monday, end: sunday };
}

// DOMContentLoaded 시 차트 생성
document.addEventListener('DOMContentLoaded', function() {
    // 예: window.myAttendance는 페이지에서 이미 설정되어 있다고 가정
    createDualDonutChart();
});

