package kr.or.ddit.approval.controller;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.account.vo.AccountVO;
import kr.or.ddit.approval.service.ApprovalService;
import kr.or.ddit.approval.vo.DraftTemplateVO;
import kr.or.ddit.file.service.FileInfoService;
import kr.or.ddit.file.vo.FileDetailVO;
import kr.or.ddit.team.vo.TeamVO;

@Controller
public class ApprovalUpdateController {

	@Inject
	private ApprovalService service;

	@Inject
	private FileInfoService fileService;

	
	
	 @ModelAttribute("categoryList")
    public List<String> getCategoryList(){
		return service.getAllTemplateCategories();
    	
    }
	/**
	 * 양식 수정 폼
	 */
	@GetMapping("/approval/approvalUpdateForm")
	public String ApprovalDocUpdateForm(@RequestParam("templateId") Long templateId, Model model, HttpSession session) {
		// 팀 리스트 조회
		List<TeamVO> teamVO = service.getTeamList();
		model.addAttribute("teamList", teamVO);

		// 상세 정보 조회
		DraftTemplateVO templateVO = service.draftTemplateDetail(templateId);
		model.addAttribute("templateVO", templateVO);

		System.out.println(templateVO);

		List<FileDetailVO> flist = templateVO.getFileDetails();

		for (int i = 0; i < flist.size(); i++) {
			System.out.println(flist.get(i));
		}

		return "tiles:approval/approvalUpdateForm";
	}

	/**
	 * 양식 수정 처리 (파일 업로드 포함)
	 */
	@Transactional
	@PostMapping("/approval/approvalUpdate")
	public String ApprovalUpdateProcess(DraftTemplateVO draftTemplate,
			@RequestParam(value = "files", required = false) MultipartFile[] files, HttpSession session) {
		try {
			// 1️ 현재 로그인한 사용자 정보 가져오기
			AccountVO account = (AccountVO) session.getAttribute("sessionAccount");
			draftTemplate.setEmpId(account.getEmpId());

			// 2️ 기존 파일 ID 유지 로직
			Long fileId = null;

			// 기존 파일이 존재하면 유지
			if (draftTemplate.getTemplateFiles() != null && !draftTemplate.getTemplateFiles().isEmpty()) {
				fileId = Long.valueOf(draftTemplate.getTemplateFiles());
			}

			List<Long> fileIds = new ArrayList<>();

			// 3️⃣ 새 파일이 있으면 업로드 진행
			if (files != null && files.length > 0) {
				for (MultipartFile file : files) {
					if (!file.isEmpty()) {
						if (fileId == null) {
							fileId = fileService.createFileGroup(); // 새로운 FILE_ID 생성
						}
						Long detailId = fileService.saveFileWithGroup(file, fileId);
						fileIds.add(detailId);
					}
				}
			}

			// 4️⃣ 기존 파일 유지 처리
			if (fileId != null) {
				draftTemplate.setTemplateFiles(fileId.toString()); // 기존 파일 유지
			}

			// 5️⃣ 결재 양식 업데이트 (파일 정보 포함)
			service.updateDraftTemplate(draftTemplate, fileIds);

		} catch (Exception e) {
			e.printStackTrace();
			return "redirect:/approval/approvalUpdateForm?templateId=" + draftTemplate.getTemplateId() + "&error=true";
		}

		return "redirect:/approval/list";
	}

}
