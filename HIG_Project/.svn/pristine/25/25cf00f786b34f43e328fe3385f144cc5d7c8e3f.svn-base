<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://www.springframework.org/security/tags" prefix="security"%>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<style>
  body {
	font-family: 'Pretendard', 'Noto Sans KR', sans-serif;
	margin: 0;
	padding: 0;
	background-color: #f4f6f9;
	color: #212529;
}

.container {
	width: 100%;
	max-width: 1800px;
	margin: auto;
	padding: 30px;
	background: #ffffff;
	border-radius: 12px;
	box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
	margin-bottom: 30px;
}

h2 {
	text-align: center;
	font-weight: 700;
	font-size: 1.8rem;
	color: #343a40;
	margin-top: 10px;
	margin-bottom: 30px;
}

h4 {
	font-size: 1.3rem;
	font-weight: 600;
	margin: 10px 0 20px;
	text-align: center;
	color: #495057;
}

.summary {
	display: flex;
	justify-content: space-between;
	gap: 20px;
	flex-wrap: wrap;
}

.card {
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
	background-color: #f8f9fa;
	padding: 25px;
	border-radius: 10px;
	width: 32%; /* 가로 너비 고정 */
	min-width: 300px; /* 최소 너비 보장 */
	box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
	transition: all 0.3s ease;
}

.card:hover {
	transform: translateY(-4px);
	box-shadow: 0 8px 18px rgba(0, 0, 0, 0.1);
}

.card canvas {
	width: 200px !important;
	height: 200px !important;
}

.card span {
	font-size: 22px;
	font-weight: 700;
	color: #0d6efd;
	margin-top: 8px;
}

.month-nav {
	color: #0d6efd;
	font-weight: bold;
	font-size: 1.3rem;
	padding: 0 10px;
	cursor: pointer;
	transition: transform 0.2s;
}

.month-nav:hover {
	transform: scale(1.15);
	color: #0a58ca;
}

.accordion {
	display: flex;
	justify-content: space-between;
	gap: 20px;
	flex-wrap: wrap;
	margin-top: 20px;
}

.week-left,
.week-right {
	width: 48%;
	min-width: 400px;
	overflow-x: auto;
	background-color: #ffffff;
	border-radius: 10px;
	box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
	padding: 10px;
}

table {
	width: 100%;
	border-collapse: collapse;
	font-size: 0.95rem;
}

th,
td {
	padding: 14px 16px;
	border-bottom: 1px solid #e9ecef;
	text-align: center;
	white-space: nowrap;
	font-size: 16px;
}

th {
	background-color: #f1f3f5;
	font-weight: 600;
	color: #495057;
}

tr:hover {
	background-color: #f8f9fa;
}

#Myattendance {
	text-align: center;
	margin-top: 20px;
	font-weight: 600;
	color: #495057;
}
</style>
  <security:authentication property="principal" var="principal" />
<div class="page-container container-fluid" style="width: 1800px">
  <div class="d-flex justify-content-between align-items-center mb-2">
    
    <!-- 좌측: 버튼 그룹 -->
    <div>
      <button type="button" class="btn btn-outline-secondary" onclick="history.back();">
        <i class="fas fa-arrow-left"></i>
      </button>
    </div>

    <!-- 우측: Breadcrumb -->
    <nav aria-label="breadcrumb">
      <ol class="breadcrumb mb-0">
       <li class="breadcrumb-item fw-bold text-primary"><a href="${pageContext.request.contextPath }/account/login/home"> 📌 Main</a></li>
        <li class="breadcrumb-item active" aria-current="page">내 근태 현황</li>
        <li class="breadcrumb-item">
          <a href="${pageContext.request.contextPath }/MyAnnual?empId=${principal.realUser.empId}">내 연차 내역</a>
        </li>
      </ol>
    </nav>

  </div>
</div>

<div class="container">
  <h3>근태 현황</h3>
    <h4>
        ${employee.department.departmentName}
        ${employee.team.teamName}
        ${employee.name}
        ${employee.rank.rankName}
    </h4>
    <input type="hidden" value="${employee.empId}" id="empId" />
    <h2>
        <span class="month-nav" onclick="changeMonth(-1)"> ⫷</span>
         <span id="currentMonth"></span>
         <span class="month-nav" onclick="changeMonth(1)"> ⫸</span>
    </h2>
    <div class="summary">
        <div class="card">
            <input type="hidden" id="monthTotal"/>
            <canvas id="totalchart"></canvas>
        </div>
        <div class="card">
            <input type="hidden" id="monthOvertime"/>
            <canvas id="overtimechart"></canvas>
        </div>
        <div class="card">
            <input type="hidden" id="monthRemain"/>
            <canvas id="remainchart"></canvas>
        </div>
    </div>
</div>
<br>
<div class="container">
 <h5 id="Myattendance">근태 기록</h5>
    <div class="accordion" id="weeksAccordion">
        <!-- 왼쪽 테이블 -->
        <div class="week-left" id="weekLeft">
            <table>
                <thead>
                    <tr>
                        <th>일자</th>
                        <th>업무 시작</th>
                        <th>업무 종료</th>
                        <th>총 근무 시간</th>
                        <th>근무 상세</th>
                    </tr>
                </thead>
                <tbody></tbody> <!-- 동적으로 날짜별로
                추가될 부분 -->
            </table>
        </div>
        <!-- 오른쪽 테이블 -->
        <div class="week-right" id="weekRight">
            <table>
                <thead>
                    <tr>
                        <th>일자</th>
                        <th>업무 시작</th>
                        <th>업무 종료</th>
                        <th>총 근무 시간</th>
                        <th>근무 상세</th>
                    </tr>
                </thead>
                <tbody></tbody> <!-- 동적으로 날짜별로 추가될 부분 -->
            </table>
        </div>
    </div>
</div>
<script>
var accumulatedSecondsTotal = 0;

// 현재 월을 설정합니다.
function updateMonth(monthOffset) {
    let today = new Date();
    let year = today.getFullYear();  // 예: 2025
    let month = (today.getMonth() + 1).toString().padStart(2, '0'); // 예: 04

    document.getElementById('currentMonth').innerText = `\${year}.\${month}`;
    generateTables(year, month);
    updateSummary(year, month);
}

// 월 변경 이벤트
function changeMonth(offset) {
    let currentMonthText = document.getElementById('currentMonth').innerText;
    let currentDate = new Date(currentMonthText + "-01");  // 예: 2025-03-01

    currentDate.setMonth(currentDate.getMonth() + offset);  // 한 달 이동

    let year = currentDate.getFullYear();
    let month = (currentDate.getMonth() + 1).toString().padStart(2, '0');  // month는 0부터 시작하므로 +1
	document.getElementById('currentMonth').innerText = `\${year}.\${month}`;
	
    let ym = `\${year}-\${month}`;
    let empId = document.querySelector("#empId").value;
    $.ajax({
        url: '/myAttendance',
        type: 'GET',
        dataType: "json",
        data: { workDate: ym, empId: empId },
        success: function(data) {
            myAttendance = data.myAttendance;
            generateTables(year, month); // 테이블 갱신
            updateSummary(year, month);  // Summary 갱신
        },
        error: function(xhr, status, error) {
            console.error("데이터 로딩 실패:", error);
        }
    });
}

// 날짜에 따라 테이블 생성
function generateTables(year, month) {
    accumulatedSecondsTotal = 0;
    let leftContainer = document.getElementById('weekLeft').querySelector('tbody');
    let rightContainer = document.getElementById('weekRight').querySelector('tbody');
    leftContainer.innerHTML = "";
    rightContainer.innerHTML = "";
    // 현재 월의 데이터만 필터링
    let filteredData = myAttendance
        .filter(x => x.workDate.startsWith(`\${year}-\${month}`))
        .sort((a, b) => a.workDate.localeCompare(b.workDate)); // 날짜순 정렬

    filteredData.forEach(x => {
        let day = parseInt(x.workDate.substring(8)); // 날짜 숫자로 변환
        let tableRow = createTableRow(x);
		
        if (day <= 15) {
            leftContainer.innerHTML += tableRow; // 1~15일 → 왼쪽
        } else {
            rightContainer.innerHTML += tableRow; // 16일 이후 → 오른쪽
        }
    });
    console.log("accumulatedSecondsTotal " + accumulatedSecondsTotal);
}

// 초를 시간/분/초로 변환하는 함수
function formatTime(seconds) {
    let h = Math.floor(seconds / 3600);
    let m = Math.floor((seconds % 3600) / 60);
    let s = seconds % 60;
    return `\${h}h \${m}m \${s}s`;
}

// Summary 업데이트 함수 - 총 근무시간(기본+연장+야간)을 모두 합산
function updateSummary(year, month) {
	let empId = document.querySelector("#empId").value;
	var minusSeconds = 0;
	
	// 연차나 반차가 있을 경우에 남은 근무시간에서 차감
	$.ajax({
	    url: '/MyAnnualHistory',
	    type: 'GET',
	    dataType: "json",
	    data: { empId: empId },
	    success: function(data) {
	        console.log(data);
	        data.empHistoryList.forEach(i => {
	        	let start = new Date(i.leaveDate);
	            let end = new Date(i.leaveEndDate);
	            
	         // 날짜 차이 계산 (밀리초 기준 → 일 단위로 변환)
	            let days = Math.floor((end - start) / (1000 * 60 * 60 * 24)) + 1;
	         
	            for (let d = 0; d < days; d++) {
	                if (i.annualCode === "AC_10" || i.annualCode === "AC_11") {
	                    minusSeconds += 4 * 60 * 60;
	                } else {
	                    minusSeconds += 8 * 60 * 60;
	                }
	            }
	        });
	        let totalSeconds = 0;
	        // 이번 달 평일(월~금) 개수 계산
	        let totalWeekdays = getWeekdaysInMonth(year, month);
	        let targetWorkSeconds = totalWeekdays * 8 * 3600; // 평일 * 8시간을 초 단위로 변환

	        // myAttendance 데이터에서 총 근무시간 합산 (시: 기본, 연장, 야간 / 분: 기본, 연장, 야간)
	        myAttendance.forEach(x => {
	            if (x.workDate.startsWith(`\${year}-\${month}`)) {
	                let hoursSum = (parseInt(x.workingHours) || 0) +
	                               (parseInt(x.overtimeHours) || 0) +
	                               (parseInt(x.nightWorkHours) || 0);
	                let minutesSum = (parseInt(x.workingMinutes) || 0) +
	                                 (parseInt(x.overtimeMinutes) || 0) +
	                                 (parseInt(x.nightWorkMinutes) || 0);
	                let totalMinutes = hoursSum * 60 + minutesSum;
	                totalSeconds += totalMinutes * 60;
	            }
	        });

	        // 이번 달 초과 시간과 잔여 시간 계산
	        let overtimeSeconds = Math.max(totalSeconds - targetWorkSeconds, 0);
	        let remainSeconds = Math.max(targetWorkSeconds - totalSeconds - minusSeconds, 0) 
	        // DOM 업데이트
	        document.getElementById("monthTotal").innerText = formatTime(totalSeconds);
	        document.getElementById("monthOvertime").innerText = formatTime(overtimeSeconds);
	        document.getElementById("monthRemain").innerText = formatTime(remainSeconds);

	        totalchart(totalSeconds, remainSeconds);
	        overtimechart(overtimeSeconds);
	        remainchart(remainSeconds, totalSeconds);
	    },
	    error: function(xhr, status, error) {
	        console.error("데이터 로딩 실패:", error);
	    }
	});
	
    
}

// 차트 변수
let totalChartInstance = null;
let overtimeChartInstance = null;
let remainChartInstance = null;

function totalchart(totalSeconds, remainSeconds) {
    let ctx = document.getElementById('totalchart').getContext('2d');
    if (totalChartInstance) {
        totalChartInstance.destroy();
    }
    totalChartInstance = new Chart(ctx, {
        type: 'doughnut',
        data: {
            labels: ['이번 달 근무 시간'],
            datasets: [
                {
                    data: [totalSeconds, remainSeconds],
                    backgroundColor: ['#5c61b4', '#EEEEEE'],
                    hoverOffset: 4
                }
            ]
        },
        options: {
            responsive: true,
            cutout: '80%',
            plugins: {
                legend: { position: 'bottom',
                	labels: {
                        font: {
                            size: 16 // <-- 범례(legend) 폰트 크기
                        }
                    }
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            let value = context.raw;
                            return `\${context.label}: \${formatTime(value)}`;
                        }
                    }
                }
            }
        },
        plugins: [{
            id: 'centerText',
            beforeDraw: function(chart) {
                let width = chart.width,
                    height = chart.height,
                    ctx = chart.ctx;
                ctx.restore();
                let fontSize = (height / 10).toFixed(2);
                ctx.font = `\${fontSize}px sans-serif`;
                ctx.textBaseline = "middle";
                ctx.textAlign = "center";
                let text = formatTime(totalSeconds);
                let textX = Math.round(width / 2);
                let textY = Math.round(height / 2.3);
                ctx.fillText(text, textX, textY);
                ctx.save();
            }
        }]
    });
}

function overtimechart(overtimeSeconds) {
    let ctx = document.getElementById('overtimechart').getContext('2d');
    if (overtimeChartInstance) {
        overtimeChartInstance.destroy();
    }
    overtimeChartInstance = new Chart(ctx, {
        type: 'doughnut',
        data: {
            labels: ['초과 근무 시간'],
            datasets: [
                {
                    data: [overtimeSeconds,'360000' ],
                    backgroundColor: ['#f1716e','#ffffff'],
                    hoverOffset: 4,
                    weight: 0.5
                }
            ]
        },
        options: {
            responsive: true,
            cutout: '80%',
            plugins: {
                legend: { position: 'bottom',
                	labels: {
                        font: {
                            size: 16 // <-- 범례(legend) 폰트 크기
                        }
                    }	
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            let value = context.dataset.data[context.dataIndex];
                            return `\${context.label}: \${formatTime(value)}`;
                        }
                    }
                }
            }
        },
        plugins: [{
            id: 'centerText',
            beforeDraw: function(chart) {
                let width = chart.width,
                    height = chart.height,
                    ctx = chart.ctx;
                ctx.restore();
                let fontSize = (height / 10).toFixed(2);
                ctx.font = `\${fontSize}px sans-serif`;
                ctx.textBaseline = "middle";
                ctx.textAlign = "center";
                let text = formatTime(overtimeSeconds);
                let textX = Math.round(width / 2);
                let textY = Math.round(height / 2.3);
                ctx.fillText(text, textX, textY);
                ctx.save();
            }
        }]
    });
}

function remainchart(remainSeconds, totalSeconds) {
    let ctx = document.getElementById('remainchart').getContext('2d');
    if (remainChartInstance) {
        remainChartInstance.destroy();
    }
    remainChartInstance = new Chart(ctx, {
        type: 'doughnut',
        data: {
            labels: ['남은 근무 시간'],
            datasets: [
                {
                    data: [remainSeconds,totalSeconds],
                    backgroundColor: ['#FFD700','#EEEEEE'],
                    hoverOffset: 4,
                    weight: 0.5
                }
            ]
        },
        options: {
            responsive: true,
            cutout: '80%',
            plugins: {
                legend: { position: 'bottom',
                	labels: {
                        font: {
                            size: 16 // <-- 범례(legend) 폰트 크기
                        }
                    }
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            let value = context.dataset.data[context.dataIndex];
                            return `\${context.label}: \${formatTime(value)}`;
                        }
                    }
                }
            }
        },
        plugins: [{
            id: 'centerText',
            beforeDraw: function(chart) {
                let width = chart.width,
                    height = chart.height,
                    ctx = chart.ctx;
                ctx.restore();
                let fontSize = (height / 10).toFixed(2);
                ctx.font = `\${fontSize}px sans-serif`;
                ctx.textBaseline = "middle";
                ctx.textAlign = "center";
                let text = formatTime(remainSeconds);
                let textX = Math.round(width / 2);
                let textY = Math.round(height / 2.3);
                ctx.fillText(text, textX, textY);
                ctx.save();
            }
        }]
    });
}

// 이번 달 평일 개수 계산 함수
function getWeekdaysInMonth(year, month) {
    let count = 0;
    let daysInMonth = new Date(year, month, 0).getDate();
    for (let day = 1; day <= daysInMonth; day++) {
        let date = new Date(year, month - 1, day);
        let dayOfWeek = date.getDay();
        if (dayOfWeek >= 1 && dayOfWeek <= 5) { // 월~금
            count++;
        }
    }
    return count;
}

// 각 날짜에 대해 테이블 행 생성
var myAttendance = [];
<c:forEach items="${myAttendance}" var="x">
myAttendance.push({
    workDate: "${x.workDate}",
    workStartTime: "${x.workStartTime}",
    workEndTime: "${x.workEndTime}",
    workingHours: "${x.workingHours}",
    workingMinutes: "${x.workingMinutes}",
    overtimeHours: "${x.overtimeHours}",
    overtimeMinutes: "${x.overtimeMinutes}",
    nightWorkHours: "${x.nightWorkHours}",
    nightWorkMinutes: "${x.nightWorkMinutes}"
});
</c:forEach>

function createTableRow(x) {
    let workStartTime = x.workStartTime ? x.workStartTime.substring(0, 5) : 'N/A';
    let workEndTime = x.workEndTime ? x.workEndTime.substring(0, 5) : 'N/A';
    let workDate = x.workDate ? x.workDate.substring(8) : 'N/A';
    let workingHours = x.workingHours || '0';
    let workingMinutes = x.workingMinutes || '0';
    let overtimeHours = x.overtimeHours || '0';
    let overtimeMinutes = x.overtimeMinutes || '0';
    let nightWorkHours = x.nightWorkHours || '0';
    let nightWorkMinutes = x.nightWorkMinutes || '0';

    // 숫자 변환
    let NumworkingHours = parseInt(x.workingHours) || 0;
    let NumovertimeHours = parseInt(x.overtimeHours) || 0;
    let NumnightWorkHours = parseInt(x.nightWorkHours) || 0;
    let NumworkingMinutes = parseInt(x.workingMinutes) || 0;
    let NumovertimeMinutes = parseInt(x.overtimeMinutes) || 0;
    let NumnightWorkMinutes = parseInt(x.nightWorkMinutes) || 0;

    // 총 근무시간 계산 (기본 + 연장 + 야간)
    let totalMinutes = (NumworkingHours + NumovertimeHours + NumnightWorkHours) * 60 +
                       (NumworkingMinutes + NumovertimeMinutes + NumnightWorkMinutes);
    let accumulatedSeconds = totalMinutes * 60;  // 분을 초로 변환
    accumulatedSecondsTotal += accumulatedSeconds;
    let totalHours = Math.floor(totalMinutes / 60);
    let totalResultinutes = totalMinutes % 60;

    return `
        <tr>
            <td>\${workDate}일</td>
            <td>\${workStartTime}</td>
            <td>\${workEndTime}</td>
            <td>\${totalHours}시간 \${totalResultinutes}분</td>
            <td>기본 \${workingHours}시간 \${workingMinutes}분 | 연장 \${overtimeHours}시간 \${overtimeMinutes}분 | 야간 \${nightWorkHours}시간 \${nightWorkMinutes}분</td>
        </tr>
    `;
}

// 초기 페이지 로드 시 월 설정
document.addEventListener('DOMContentLoaded', function() {
    updateMonth(0);
});
</script>
