<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://www.springframework.org/security/tags" prefix="security"%>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<style>
	#totalchart,#overtimechart,#remainchart {
	display: flex !important;
	justify-content: center !important;
	align-items: center !important;
	gap: 100px !important;
	width: 250px !important;
	height: 250px !important; /* 높이 조정 */
	}

    body {
        font-family: 'Roboto', sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f4f6f9;
    }

    .container {
        width: 100%;
        max-width: 1600px;
        margin: auto;
        padding: 30px;
        background: white;
        box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1);
        border-radius: 12px;
    }

    h2 {
        text-align: center;
        font-weight: 700;
        margin-bottom: 30px;
        color: #333;
    }

    .summary {
        display: flex;
        justify-content: space-between;
    }

   .card {
    display: flex;              /* 내부 요소 정렬을 위한 flex 적용 */
    justify-content: center;    /* 가로 방향 중앙 정렬 */
    align-items: center;        /* 세로 방향 중앙 정렬 */
    color: black;
    padding: 20px;
    border-radius: 8px;
    font-size: 18px;
    font-weight: bold;
    width: 30%;
    text-align: center;
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
}

	.card canvas {
	    max-width: 100%;            /* 캔버스 크기 자동 조절 */
	    max-height: 100%;           /* 캔버스 크기 자동 조절 */
	    width: 200px !important;    /* 도넛 차트 크기 조정 */
	    height: 200px !important;   /* 도넛 차트 크기 조정 */
	}
    .card span {
        display: block;
        font-size: 22px;
    }

    .accordion {
        display: flex;
        justify-content: space-between;
        gap: 20px;
        margin-bottom: 30px;
    }

    .week-left,
    .week-right {
        width: 48%;
        min-width: 400px; /* 원하는 최소 너비 설정 */
        overflow-x: auto; /* 내용이 넘치면 가로 스크롤이 생기도록 설정 */
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 10px;
    }

    th,
    td {
        padding: 12px;
        border-bottom: 1px solid #ddd;
    }
    td {
        text-align: left;
        white-space: nowrap;
    }
     /* th는 중앙 정렬 */
    th {
        background-color: #f1f1f1;
        text-align: center;
    }

    tr:hover {
        background-color: #f9f9f9;
    }

    .month-nav:hover{
    	 cursor: pointer;
    	 transform: scale(1.1);
    }
</style>
<div class="container">
<security:authentication property="principal" var="principal" />
<h5>
${employee.department.departmentName}
${employee.team.teamName}
${employee.name}
${employee.rank.rankName}
</h5>


		<input type="hidden" value="${employee.empId}" id="empId" />
	<h2>
		<span class="month-nav" onclick="changeMonth(-1)"> ⫷</span>
		 <span id="currentMonth"></span>
		 <span class="month-nav" onclick="changeMonth(1)"> ⫸</span>
	</h2>
	<div class="summary">
		<div class="card">
			<input type="hidden" id="monthTotal"/>
 			 <canvas id="totalchart"></canvas>
		</div>
		<div class="card">
			<input type="hidden" id="monthOvertime"/>
			<canvas id="overtimechart"></canvas>
		</div>
		<div class="card">
			<input type="hidden" id="monthRemain"/>
			<canvas id="remainchart"></canvas>
		</div>
	</div>
</div>
<br>
<div class="container">
    <div class="accordion" id="weeksAccordion">
        <!-- 왼쪽 테이블 -->
        <div class="week-left" id="weekLeft">
            <table>
                <thead>
                    <tr>
                        <th>일자</th>
                        <th>업무 시작</th>
                        <th>업무 종료</th>
                        <th>총 근무 시간</th>
                        <th>근무 상세</th>
                    </tr>
                </thead>
                <tbody></tbody> <!-- 동적으로 날짜별로 추가될 부분 -->
            </table>
        </div>
        <!-- 오른쪽 테이블 -->
        <div class="week-right" id="weekRight">
            <table>
                <thead>
                    <tr>
                        <th>일자</th>
                        <th>업무 시작</th>
                        <th>업무 종료</th>
                        <th>총 근무 시간</th>
                        <th>근무 상세</th>
                    </tr>
                </thead>
                <tbody></tbody> <!-- 동적으로 날짜별로 추가될 부분 -->
            </table>
        </div>
    </div>
</div>
<script>
//현재 월을 설정합니다.
function updateMonth(monthOffset) {
	let today = new Date();
	let year = today.getFullYear();  // 2025
	let month = (today.getMonth() + 1).toString().padStart(2, '0'); //04

	console.log(year,month)
    let currentMonthText = document.getElementById('currentMonth').innerText;

    document.getElementById('currentMonth').innerText = `\${year}.\${month}`;
    generateTables(year, month);
    updateSummary(year, month);
}

// 월 변경 이벤트
function changeMonth(offset) {

	let currentMonthText = document.getElementById('currentMonth').innerText;
	let currentDate = new Date(currentMonthText + "-01");  // 2025-03-01 (예시)

	currentDate.setMonth(currentDate.getMonth() + offset);  // 한 달 이동

	let year = currentDate.getFullYear();
	let month = (currentDate.getMonth() + 1).toString().padStart(2, '0');  // 0-based index이므로 +1 필요
	document.getElementById('currentMonth').innerText = `\${year}.\${month}`;

	let ym = `\${year}-\${month}`;

	let empId = document.querySelector("#empId").value;
	console.log(empId);
	console.log(ym)
    $.ajax({
        url: '/myAttendance',
        type: 'GET',
        dataType:"json",
        data: { workDate:ym ,empId:empId },  //2025-2와 empId전달
        success: function(data) {
        	console.log(data.myAttendance)
            myAttendance = data.myAttendance;

            generateTables(year, month); // 테이블 갱신
            updateSummary(year, month); // Summary 갱신
        },
        error: function(xhr, status, error) {
            console.error("데이터 로딩 실패:", error);
        }
    });
}


// 날짜에 따라 테이블 생성
function generateTables(year, month) {
	accumulatedSecondsTotal = 0;

    let leftContainer = document.getElementById('weekLeft').querySelector('tbody');
    let rightContainer = document.getElementById('weekRight').querySelector('tbody');

    leftContainer.innerHTML = "";
    rightContainer.innerHTML = "";

    // 현재 월의 데이터만 필터링
    let filteredData = myAttendance
    .filter(x => x.workDate.startsWith(`\${year}-\${month}`))
    .sort((a, b) => a.workDate.localeCompare(b.workDate)); // 날짜순 정렬

    filteredData.forEach(x => {
        let day = parseInt(x.workDate.substring(8)); // 날짜 숫자로 변환
        let tableRow = createTableRow(x);


        if (day <= 15) {
            leftContainer.innerHTML += tableRow; // 1~15일 → 왼쪽
        } else {
            rightContainer.innerHTML += tableRow; // 16일 이후 → 오른쪽
        }
    });
        console.log("accumulatedSecondsTotal " + accumulatedSecondsTotal)
}

// 초를 시간/분/초로 변환하는 함수
function formatTime(seconds) {
    let h = Math.floor(seconds / 3600);
    let m = Math.floor((seconds % 3600) / 60);
    let s = seconds % 60;
    return `\${h}h \${m}m \${s}s`;
}

function updateSummary(year, month) {

	let totalSeconds = 0;
	//이번 달의 평일(월~금) 개수 계산
	let totalWeekdays = getWeekdaysInMonth(year, month);
	let targetWorkSeconds  = totalWeekdays * 8 * 3600; // 평일 * 8시간 * 초 단위 변환

    // 근무 데이터 합산
    myAttendance.forEach(x => {
        if (x.workDate.startsWith(`\${year}-\${month}`)) {
            let totalMinutes = (parseInt(x.workingHours) || 0) * 60 + (parseInt(x.workingMinutes) || 0);
            totalSeconds += totalMinutes * 60; // 초 단위로 변환
        }
    });

    // 이번달 초과 시간 계산 (목표 근무 시간을 초과한 부분)
    let overtimeSeconds = Math.max(totalSeconds - targetWorkSeconds, 0);

    // 이번달 잔여 시간 계산 (목표 근무 시간에서 아직 남은 시간)
    let remainSeconds = Math.max(targetWorkSeconds - totalSeconds, 0);

    // DOM 업데이트
    document.getElementById("monthTotal").innerText = formatTime(totalSeconds);
    document.getElementById("monthOvertime").innerText = formatTime(overtimeSeconds);
    document.getElementById("monthRemain").innerText = formatTime(remainSeconds);
    totalchart(totalSeconds,remainSeconds);
    overtimechart(overtimeSeconds);
    remainchart(remainSeconds);
}
//기존 차트 저장할 변수 선언
let totalChartInstance = null;
let overtimeChartInstance = null;
let remainChartInstance = null;



function totalchart(totalSeconds, remainSeconds) {
    let ctx = document.getElementById('totalchart').getContext('2d');

    // 기존 차트가 있다면 삭제
    if (totalChartInstance) {
        totalChartInstance.destroy();
    }

    totalChartInstance = new Chart(ctx, {
    	  type: 'doughnut',
          data: {
              labels: ['이번 달 근무 시간'],
              datasets: [
                  {
                      data: [totalSeconds, remainSeconds],  // 현재 시간 & 남은 시간
                      backgroundColor: ['#FF5733', '#EEEEEE'], // 근무한 시간(빨강), 남은 시간(회색)
                      hoverOffset: 4
                  }
              ]
          },
        options: {
            responsive: true,
            cutout: '80%',
            plugins: {
                legend: { position: 'bottom' },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            let value = context.raw;
                            return `\${context.label}: \${formatTime(value)}`;
                        }
                    }
                }
            }
        },
        plugins: [{
            id: 'centerText',
            beforeDraw: function(chart) {
                let width = chart.width,
                    height = chart.height,
                    ctx = chart.ctx;

                ctx.restore();
                let fontSize = (height / 10).toFixed(2);  // 텍스트 크기 조절
                ctx.font = `\${fontSize}px sans-serif`;
                ctx.textBaseline = "middle";
                ctx.textAlign = "center";

                let text =  formatTime(totalSeconds);  // 표시할 텍스트
                let textX = Math.round(width / 2);
                let textY = Math.round(height / 2.3);

                ctx.fillText(text, textX, textY);  // 중앙에 텍스트 추가
                ctx.save();
            }
        }]
    });
}
function overtimechart(overtimeSeconds) {
    let ctx = document.getElementById('overtimechart').getContext('2d');

    if (overtimeChartInstance) {
        overtimeChartInstance.destroy();
    }
	console.log(overtimeSeconds)
   overtimeChartInstance = new Chart(ctx, {
        type: 'doughnut',
        data: {
            labels: ['초과 근무'],
            datasets: [
                {
                    data: [overtimeSeconds], // 초 단위 그대로 전달!
                    backgroundColor: ['#EEEEEE'],
                    hoverOffset: 4,
                    weight: 0.5
                }
            ]
        },
        options: {
            responsive: true,
            cutout: '80%',
            plugins: {
                legend: { position: 'bottom' },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            let dataset = context.dataset;
                            let value = dataset.data[context.dataIndex]; // 초 단위 데이터 가져오기
                            return `\${context.label}: \${formatTime(value)}`; // 변환된 시간 표시
                        }
                    }
                }
            }
        },
        plugins: [{
            id: 'centerText',
            beforeDraw: function(chart) {
                let width = chart.width,
                    height = chart.height,
                    ctx = chart.ctx;

                ctx.restore();
                let fontSize = (height / 10).toFixed(2);  // 텍스트 크기 조절
                ctx.font = `\${fontSize}px sans-serif`;
                ctx.textBaseline = "middle";
                ctx.textAlign = "center";

                let text =  formatTime(overtimeSeconds);  // 표시할 텍스트
                let textX = Math.round(width / 2);
                let textY = Math.round(height / 2.3);

                ctx.fillText(text, textX, textY);  // 중앙에 텍스트 추가
                ctx.save();
            }
        }]
    });
}
function remainchart(remainSeconds) {
    let ctx = document.getElementById('remainchart').getContext('2d');
    if (remainChartInstance) {
        remainChartInstance.destroy();
    }
	console.log(remainSeconds)
	remainChartInstance = new Chart(ctx, {
        type: 'doughnut',
        data: {
            labels: ['남은 근무'],
            datasets: [
                {
                    data: [remainSeconds], // 초 단위 그대로 전달!
                    backgroundColor: ['#FFD700'],
                    hoverOffset: 4,
                    weight: 0.5
                }
            ]
        },
        options: {
            responsive: true,
            cutout: '80%',
            plugins: {
                legend: { position: 'bottom' },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            let dataset = context.dataset;
                            let value = dataset.data[context.dataIndex]; // 초 단위 데이터 가져오기
                            return `\${context.label}: \${formatTime(value)}`; // 변환된 시간 표시
                        }
                    }
                }
            }
        },
        plugins: [{
            id: 'centerText',
            beforeDraw: function(chart) {
                let width = chart.width,
                    height = chart.height,
                    ctx = chart.ctx;

                ctx.restore();
                let fontSize = (height / 10).toFixed(2);  // 텍스트 크기 조절
                ctx.font = `\${fontSize}px sans-serif`;
                ctx.textBaseline = "middle";
                ctx.textAlign = "center";

                let text =  formatTime(remainSeconds);  // 표시할 텍스트
                let textX = Math.round(width / 2);
                let textY = Math.round(height / 2.3);

                ctx.fillText(text, textX, textY);  // 중앙에 텍스트 추가
                ctx.save();
            }
        }]
    });
}
// 📌 이번 달 평일 개수 계산 함수
function getWeekdaysInMonth(year, month) {
    let count = 0;
    let daysInMonth = new Date(year, month, 0).getDate(); // 해당 월의 총 일수

    for (let day = 1; day <= daysInMonth; day++) {
        let date = new Date(year, month - 1, day); // JS에서 month는 0부터 시작
        let dayOfWeek = date.getDay(); // 0(일요일) ~ 6(토요일)

        if (dayOfWeek >= 1 && dayOfWeek <= 5) { // 월~금 (1~5)
            count++;
        }
    }
    return count;
}

// 각 날짜에 대해 테이블 행 생성
var myAttendance = [];

<c:forEach items="${myAttendance}" var="x">
myAttendance.push({
    workDate: "${x.workDate}",
    workStartTime: "${x.workStartTime}",
    workEndTime: "${x.workEndTime}",
    workingHours: "${x.workingHours}",
    workingMinutes: "${x.workingMinutes}",
    overtimeHours: "${x.overtimeHours}",
    overtimeMinutes: "${x.overtimeMinutes}",
    nightWorkHours: "${x.nightWorkHours}",
    nightWorkMinutes: "${x.nightWorkMinutes}"
});
</c:forEach>;


function createTableRow(x) {
	let workStartTime = x.workStartTime ? x.workStartTime.substring(0, 5) : 'N/A';  // 'N/A'는 기본값
    let workEndTime = x.workEndTime ? x.workEndTime.substring(0, 5) : 'N/A';  // 'N/A'는 기본값
    let workDate = x.workDate ? x.workDate.substring(8) : 'N/A';  // 'N/A'는 기본값
    let workingHours = x.workingHours || '0';
    let workingMinutes = x.workingMinutes || '0';
    let overtimeHours = x.overtimeHours || '0';
    let overtimeMinutes = x.overtimeMinutes || '0';
    let nightWorkHours = x.nightWorkHours || '0';
    let nightWorkMinutes = x.nightWorkMinutes || '0';

    //숫자 변환
	let NumworkingHours = parseInt(x.workingHours) || 0;
	let NumovertimeHours = parseInt(x.overtimeHours) || 0;
	let NumnightWorkHours = parseInt(x.nightWorkHours) || 0;
	let NumworkingMinutes = parseInt(x.workingMinutes) || 0;
	let NumovertimeMinutes = parseInt(x.overtimeMinutes) || 0;
	let NumnightWorkMinutes = parseInt(x.nightWorkMinutes) || 0;

    // 🔹 총 근무시간 계산 (기본 + 연장 + 야간)
    let totalMinutes = (NumworkingHours + NumovertimeHours + NumnightWorkHours) * 60 + (NumworkingMinutes + NumovertimeMinutes + NumnightWorkMinutes);

    let accumulatedSeconds = totalMinutes * 60;  // 분을 초로 변환
    accumulatedSecondsTotal += accumulatedSeconds;

    let totalHours = Math.floor(totalMinutes / 60);
    let totalResultinutes = totalMinutes % 60;

    return `
	    <tr>
	        <td>\${workDate} </td>
	        <td>\${workStartTime}</td>
	        <td>\${workEndTime}</td>
	        <td>\${totalHours}시간 \${totalResultinutes}분</td>
	        <td>기본 \${workingHours}시간 \${workingMinutes}분 / 연장 \${overtimeHours}시간 \${overtimeMinutes}분 / 야간 \${nightWorkHours}시간 \${nightWorkMinutes}분</td>
	    </tr>
	`;
}

// 초기 페이지 로드 시 월 설정
document.addEventListener('DOMContentLoaded', function() {
    updateMonth(0);  // 현재 월로 초기화
});


</script>
