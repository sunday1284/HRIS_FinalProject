/**
 * << 개정이력(Modification Information) >>
 *   수정일            수정자         수정내용
 *  -----------    -------------    ---------------------------
 * 2025. 4.  5.      CHOI          제출 문서 상세보기   
 * 2025. 4.  5.      CHOI          기안 회수 기능 만듦 -> 임시저장 모듈화   
 */
import { 
  saveTempDraft, listAllDrafts, openSavedDraft, removeDraft,
  generateUniqueDraftId, formatTimestampToLocal, fillDraftForm,
  storeRecalledDocInSession, submitReDraft, getLoggedInUserIdSomehow
} from './approvalTempDraftSave.js';

document.addEventListener("DOMContentLoaded", async function() {
  // (A) 로그인한 사용자 ID 조회 함수
  async function getLoggedInUserId() {
    try {
      const resp = await axios.get(window.contextPath + "/approvalProcess/getApproverId");
      return resp.data;
    } catch (error) {
      console.error("로그인 사용자 ID 조회 실패:", error);
      return null;
    }
  }

  // (B) URL Query Parameter 추출 함수
  function getQueryParam(param) {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get(param);
  }

  // (C) 연차 옵션 API로 불러오기 및 셀렉트 채우기 함수
  async function loadAnnualCodeOptionsFromAPI() {
    try {
      const contextPath = window.contextPath || "";
      const response = await axios.get(contextPath + "/resources/data/annualOptions.json");
      return response.data;
    } catch (error) {
      console.error("연차 옵션 불러오기 실패:", error);
      return [];
    }
  }

  async function fillAnnualCodeOptionsFromAPI() {
    const select = document.getElementById("annualCode");
    if (!select) {
      console.warn("annualCode 셀렉트 요소가 존재하지 않습니다.");
      return;
    }
    const options = await loadAnnualCodeOptionsFromAPI();
    select.innerHTML = "";
    const defaultOption = document.createElement("option");
    defaultOption.value = "";
    defaultOption.text = "선택하세요";
    select.appendChild(defaultOption);

    options.forEach(opt => {
      const option = document.createElement("option");
      option.value = opt.cd;
      option.text = opt.nm;
      select.appendChild(option);
    });
  }

  // (D) 연차 신청서 폼 HTML 로드 (CKEditor 적용)
  async function loadAnnualFormHtml() {
    try {
      const resp = await axios.get(window.contextPath + "/resources/html/approval/approval1_1.html");
      const annualFormContainer = document.getElementById("annualFormContainer");
      if (annualFormContainer) {
        annualFormContainer.innerHTML = resp.data;
        
        // CKEditor 적용
        const reasonElem = document.getElementById("reason");
        if (reasonElem) {
          if (window.CKEDITOR && CKEDITOR.instances && CKEDITOR.instances.reason) {
            CKEDITOR.instances.reason.destroy(true);
          }
          if (window.CKEDITOR) {
            CKEDITOR.replace('reason', { versionCheck: false });
          } else {
            console.warn("CKEDITOR가 로드되지 않았습니다.");
          }
        }
      } else {
        console.warn("annualFormContainer 요소가 존재하지 않습니다.");
      }
    } catch (err) {
      console.error("연차 신청서 폼 로드 실패:", err);
    }
  }

  // (E) DB 날짜 문자열에서 날짜 부분만 추출하는 함수
  function extractDateString(dbDateString) {
    if (!dbDateString) return "";
    return dbDateString.split(" ")[0];
  }

  // (F) 연차 신청서 폼에 데이터 매핑 함수
  function loadAnnualForm(docInfo) {
    const pureLeaveDate = extractDateString(docInfo.leaveDate);
    const pureLeaveEndDate = extractDateString(docInfo.leaveEndDate);
    const pureDraftDate = extractDateString(docInfo.draftDate);

    const nameFields = [
      { name: "draftUser", value: docInfo.draftEmpName },
      { name: "draftDept", value: docInfo.draftDepartmentName },
      { name: "draftDate", value: pureDraftDate },
      { name: "docNo", value: docInfo.draftId },
      { name: "leaveDate", value: pureLeaveDate },
      { name: "leaveEndDate", value: pureLeaveEndDate },
      { name: "annualCode", value: docInfo.annualCode || "" }
    ];

    nameFields.forEach(field => {
      const element = document.getElementsByName(field.name)[0];
      if (element) {
        if (element.tagName === 'SELECT') {
          if (Array.isArray(docInfo[field.name])) {
            let txt = '<option value="">선택하세요</option>\n';
            docInfo[field.name].forEach(opt => {
              txt += `<option value="${opt.cd}">${opt.nm}</option>\n`;
            });
            element.innerHTML = txt;
            if (docInfo.hasOwnProperty(field.name + "Value")) {
              element.value = docInfo[field.name + "Value"];
            }
          } else {
            element.value = field.value;
          }
        } else {
          element.value = field.value || "";
        }
      } else {
        console.warn(`요소 [name="${field.name}"]가 존재하지 않습니다.`);
      }
    });
	
	const reasonContent = (docInfo.annualHistory && docInfo.annualHistory.reason) || docInfo.reason || "";
    if (window.CKEDITOR && CKEDITOR.instances && CKEDITOR.instances.reason) {
      CKEDITOR.instances.reason.setData(reasonContent|| "");
    } else {
		console.warn("CKEDITOR 인스턴스(reason)가 아직 생성되지 않았습니다.");
	}
  }

  // (G) 결재자 목록 테이블에 데이터를 표시하는 함수
  function fillApprovers(draftapproverList) {
    const approverTableBody = document.getElementById("approverTableBody");
    if (!approverTableBody) {
      console.warn("approverTableBody 요소가 존재하지 않습니다.");
      return;
    }
    approverTableBody.innerHTML = "";

    draftapproverList.forEach(function(approver) {
      let row = document.createElement("tr");
      row.innerHTML = `
         <td style="text-align:center;">${approver.approverName || ""}</td>
         <td style="text-align:center;">${approver.approverDepartmentName || ""}</td>
         <td style="text-align:center;">${approver.approverRankName || ""}</td>
         <td style="text-align:center;">${approver.aprSeq || ""}</td>
         <td style="text-align:center;">${approver.aprStatus || ""}</td>
       `;
      approverTableBody.appendChild(row);
    });
  }

  // (H) 상신 문서 상세 정보를 조회하고 UI에 반영하는 함수
  async function loadDraftDetail() {
    const draftId = getQueryParam("draftId");
    if (!draftId) {
      console.warn("URL에 draftId 파라미터가 없습니다. (상세보기 페이지가 아닐 수도 있음)");
    }

    try {
      const loggedInUser = await getLoggedInUserIdSomehow();
      if (!loggedInUser) {
        console.warn("로그인된 사용자 정보를 가져오지 못했습니다.");
      }

      if (draftId) {
        const response = await axios.get(window.contextPath + "/approvalProcess/myDraftDetail", {
          params: { draftId: draftId, empId: loggedInUser }
        });
        const data = response.data;
        console.log("상신 문서 상세 데이터:", data);

        const docTitleEl = document.getElementById("draftTitle");
        const draftEmpNameEl = document.getElementById("draftEmpName");
        const draftDateEl = document.getElementById("draftDate");
        const draftStatusEl = document.getElementById("draftStatus");

        if (docTitleEl) {
          docTitleEl.textContent = data.draftTitle || "[제목 없음]";
        }
        if (draftEmpNameEl) {
          draftEmpNameEl.textContent = data.draftEmpName || "작성자 없음";
        }
        if (draftDateEl) {
          draftDateEl.textContent = data.draftDate ? extractDateString(data.draftDate) : "작성일 없음";
        }
        if (draftStatusEl) {
          draftStatusEl.textContent = data.draftStatus || "상태 없음";
        }

        await loadAnnualFormHtml();
        await fillAnnualCodeOptionsFromAPI();
        loadAnnualForm(data);
        fillApprovers(data.draftapproverList || []);

        // 문서 상태에 따라 버튼 표시 제어
        const retrieveBtn = document.getElementById("retrieveBtn");
        const resubmitDetailBtn = document.getElementById("resubmitDetailBtn");
        if (resubmitDetailBtn) {
          resubmitDetailBtn.style.display = (data.draftStatus === "반려") ? "inline-block" : "none";
        }
        if (retrieveBtn) {
          retrieveBtn.style.display = (
            data.draftStatus === "대기" || 
            data.draftStatus === "결재 진행 중" || 
            data.draftStatus === "보류"
          ) ? "inline-block" : "none";
        }
      } else {
        await loadAnnualFormHtml();
        await fillAnnualCodeOptionsFromAPI();
      }
    } catch (error) {
      console.error("문서 상세 정보 불러오기 실패:", error);
    }
  }

  // (I) 회수 버튼 이벤트 처리
  const retrieveBtn = document.getElementById("retrieveBtn");
  if (retrieveBtn) {
    retrieveBtn.addEventListener("click", async function() {
      if (!confirm("회수 하시겠습니까?")) return;

      let draftId = getQueryParam("draftId");
      if (!draftId) {
        draftId = $("#draftId").val();
      }
      if (!draftId) {
        alert("회수할 문서 ID가 없습니다.");
        return;
      }

      const empId = await getLoggedInUserId();
      if (!empId) {
        alert("로그인된 사용자 정보를 가져오지 못했습니다.");
        return;
      }

      try {
        console.log("[회수 요청] draftId=", draftId, "empId=", empId);
        const resp = await axios.post(window.contextPath + "/approval/drafter/recall", {
          draftId: draftId,
          empId: empId
        });
        console.log("[회수 응답] status=", resp.status, "data=", resp.data);

        if (resp.status === 200) {
          alert(resp.data);
          let docData = null;
          try {
            const detailResp = await axios.get(window.contextPath + "/approvalProcess/myDraftDetail", {
              params: { draftId: draftId, empId: empId }
            });
            docData = detailResp.data;
          } catch (error) {
            console.warn("회수 후 상세 재조회 실패 (회수는 이미 성공)", error);
          }
          if (docData) {
            console.log("회수된 문서 docData:", docData);
            storeRecalledDocInSession(docData, empId);
            await listAllDrafts();
          }
          window.location.href = window.contextPath + "/approval/templateList";
        } else {
          alert("회수 호출 실패. 서버 응답 상태: " + resp.status);
        }
      } catch (error) {
        console.error("회수 호출 실패", error);
        alert("회수 호출 실패~");
        return;
      }
    });
  }

  // (J) 재상신 버튼 이벤트 처리 (모달 내부의 재상신 버튼)
  const resubmitBtn = document.getElementById("resubmitBtn");
  if (resubmitBtn) {
		resubmitBtn.addEventListener("click", async function() {
        if (!confirm("재상신 하시겠습니까?")) return;

        let draftId = getQueryParam("draftId") || $("#draftId").val();
        if (!draftId) {
          alert("재상신할 문서 ID가 없습니다.");
          return;
        }

        const empId = await getLoggedInUserId();
        if (!empId) {
          alert("로그인된 사용자 정보를 가져오지 못했습니다.");
          return;
        }

        const key = `tempDraft_${empId}_${draftId}`;
        const storedData = sessionStorage.getItem(key);
        if (!storedData) {
          alert("임시저장 데이터를 찾을 수 없습니다.");
          return;
        }

        let draftData = JSON.parse(storedData);
        await submitReDraft(draftData);

        const modalElement = document.getElementById("approvalFormModal");
        let modalInstance = bootstrap.Modal.getInstance(modalElement);
        if (modalInstance) {
          modalInstance.hide();
        }
        sessionStorage.removeItem(key);
        await listAllDrafts();
  	});
  }
   
  // 제출 문서 상세보기에서 -> 재요청 버튼을 클릭했을때의 상황
  const resubmitDetailBtn = document.getElementById("resubmitDetailBtn");
  if (resubmitDetailBtn) {
     resubmitDetailBtn.addEventListener("click", async function() {
       if (!confirm("재요청 하시겠습니까?")) return;

       let draftId = getQueryParam("draftId") || $("#draftId").val();
       if (!draftId) {
         alert("재요청할 문서 ID가 없습니다.");
         return;
       }

       const empId = await getLoggedInUserId();
       if (!empId) {
         alert("로그인된 사용자 정보를 가져오지 못했습니다.");
         return;
       }

       try {
         console.log("[재요청] draftId=", draftId, "empId=", empId);
         const resp = await axios.post(window.contextPath + "/approval/drafter/recall", {
           draftId: draftId,
           empId: empId
         });
         console.log("[재요청 응답] status=", resp.status, "data=", resp.data);

         if (resp.status === 200) {
           alert(resp.data);
           let docData = null;
           try {
             const detailResp = await axios.get(window.contextPath + "/approvalProcess/myDraftDetail", {
               params: { draftId: draftId, empId: empId }
             });
             docData = detailResp.data;
           } catch (error) {
             console.warn("재상신 후 상세 재조회 실패 (재요청은 이미 성공)", error);
           }
           if (docData) {
             console.log("재요청된 문서 docData:", docData);
             storeRecalledDocInSession(docData, empId);
             await listAllDrafts();
           }
           window.location.href = window.contextPath + "/approval/templateList";
         } else {
           alert("재요청호출 실패. 서버 응답 상태: " + resp.status);
         }
       } catch (error) {
         console.error("재요청 호출 실패", error);
         alert("재요청 호출 실패~");
         return;
       }
     });
  }

  // (K) 페이지 로드 시 문서 상세 정보 조회
  loadDraftDetail();
});