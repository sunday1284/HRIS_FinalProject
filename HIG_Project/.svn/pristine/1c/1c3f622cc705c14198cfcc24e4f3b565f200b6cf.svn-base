/** 
 * <pre>
 * << 개정이력(Modification Information) >>
 *   
 *   수정일               수정자           수정내용
 *  -----------      -------------    ---------------------------
 * 2025. 4. 1.        youngjun            최초 생성
 * 2025. 4. 11.       ChatGPT             일괄확정/단건확정 버튼 상태, 모달 처리 동기화 개선
 * 2025. 4. 11.       ChatGPT             페이지 전체 반영 및 payStatus 동기화 개선
 * </pre>
 */
let allStatus = false;
let salaryTableInstance = null;

function initializeDataTable() {
  if ($.fn.DataTable.isDataTable("#salaryTable")) {
    $("#salaryTable").DataTable().clear().destroy();
  }

  salaryTableInstance = $("#salaryTable").DataTable({
    responsive: true,
    scrollX: true,
    language: {
      url: "//cdn.datatables.net/plug-ins/1.13.6/i18n/ko.json"
    }
  });
}

let targetFinalButton = null;
let targetFinalInfo = {};

function salaryFinal(button) {
  const tr = button.closest("tr");
  const empId = tr.querySelector("td[data-salaryid]")?.textContent.trim();
  const salaryId = tr.querySelector("td[data-salaryid]")?.getAttribute("data-salaryid");
  const netSalary = parseInt(tr.querySelector("td:nth-child(11)")?.innerText.replace(/,/g, "") || 0);
  const payStatus = button.innerText.trim();
  const requestBtn = tr.querySelector("button[onclick*='salaryRequest']");
  const requestStatus = requestBtn?.innerText.trim();

  if (payStatus === "확정" && requestStatus === "승인") {
    alert("확정취소 불가: 승인된 급여입니다.");
    return;
  }

  targetFinalButton = button;
  targetFinalInfo = { empId, salaryId, payStatus };

  document.getElementById("modalEmpCount").innerText = 1;
  document.getElementById("modalTotalAmount").innerText = netSalary.toLocaleString();

  const modal = new bootstrap.Modal(document.getElementById("confirmModal"));
  modal.show();

  const finalBtn = document.getElementById("confirmFinal");
  const newFinalBtn = finalBtn.cloneNode(true);
  finalBtn.parentNode.replaceChild(newFinalBtn, finalBtn);

  newFinalBtn.innerText = payStatus === "확정" ? "확정취소" : "확정진행";
  newFinalBtn.addEventListener("click", () => doFinalSingle(modal));
}

function doFinalSingle(modalInstance) {
  const btn = targetFinalButton;
  const { empId, salaryId, payStatus } = targetFinalInfo;
  const afterStatus = payStatus === "확정" ? "확정대기" : "확정";

  const selectedDate = document.querySelector("#payDate").value;
  const [payYear, payMonth] = selectedDate.split("-");

  $.ajax({
    url: "/salary/final",
    type: "POST",
    data: { empId, salaryId, date: payYear, date: payMonth },
    success: function (res) {
      if (res.cnt === "1") {
        btn.innerText = afterStatus;
        btn.classList.toggle("btn-danger", afterStatus === "확정");
        btn.classList.toggle("btn-outline-primary", afterStatus === "확정대기");

        const td = btn.closest("td");
        let dateDiv = td.querySelector(".confirm-date");

        if (afterStatus === "확정") {
          if (!dateDiv) {
            dateDiv = document.createElement("small");
            dateDiv.className = "confirm-date text-muted mt-1";
            td.appendChild(dateDiv);
          }
          dateDiv.innerText = res.finalDate;
        } else {
          if (dateDiv) dateDiv.remove();
        }

        // ✅ DataTable 내 데이터 직접 반영
        const table = $('#salaryTable').DataTable();
        const rowIdx = table.rows().indexes().filter((idx) => {
          const data = table.row(idx).data();
          return data.salaryId == salaryId;
        })[0];
        if (rowIdx !== undefined) {
          const rowData = table.row(rowIdx).data();
          rowData.payStatus = afterStatus;
          table.row(rowIdx).data(rowData).draw(false);
        }

        document.getElementById("confirmCount").innerText = `${res.finalCount}명`;
        updateAllStatusfinalFlag();
        updateBulkButtonText();
        showToast("✅ 작업이 성공적으로 완료되었습니다.");
        modalInstance.hide();
      } else {
        alert("처리 중 오류 발생");
      }
    },
    error: function () {
      alert("서버 통신 실패");
    }
  });
}

async function doFinalBulk(obj) {
  const { payYear, payMonth, salaryList } = window.bulkParam;
  const param = { salaryList, payYear, payMonth };

  try {
    const res = await $.ajax({
      url: `/salary/final/all?payYear=${payYear}&payMonth=${payMonth}`,
      type: "POST",
      contentType: "application/json",
      data: JSON.stringify(param)
    });

    // ✅ 모든 페이지의 버튼을 갱신하기 위해 DataTable 전체 갱신
    const table = $('#salaryTable').DataTable();
    table.rows().every(function () {
      const data = this.data();
      if (salaryList.find(s => s.salaryId == data.salaryId)) {
        data.payStatus = allStatus ? "확정대기" : "확정";
        data.confirmDate = allStatus ? null : new Date().toISOString().split("T")[0];
        this.data(data);
      }
    });
    table.draw(false);

    document.querySelector("#confirmCount").innerText = `${res.finalCount}명`;
    updateAllStatusfinalFlag();
    updateBulkButtonText();
    showToast("✅ 일괄처리 완료");
    return true;
  } catch (e) {
    alert("일괄 처리 실패");
    return false;
  }
}

function openFinalBulkModal(obj) {
  const selectedDate = document.querySelector("#payDate").value;
  const [selectYear, selectMonth] = selectedDate.split("-");
  updateAllStatusfinalFlag();

  const table = $('#salaryTable').DataTable();
  const allRows = table.rows().data().toArray();

  const salaryList = [];
  let totalNetAmount = 0;

  allRows.forEach(row => {
    const { empId, salaryId, netSalary, payStatus, paymentRequest } = row;
	
	
	//  확정취소일 경우, '승인' 상태인 건 제외
	 if (allStatus && payStatus === "확정") {
	    if (paymentRequest === "승인") return; //  승인된 건은 확정취소 불가
	  }

	  if ((!allStatus && payStatus === "확정대기") || (allStatus && payStatus === "확정")) {
	    if (empId && salaryId) {
	      salaryList.push({ empId: String(empId), salaryId: String(salaryId) });
	      totalNetAmount += netSalary;
	    }
	  }
	});

  if (salaryList.length === 0) {
    alert(allStatus ? "확정취소 대상이 없습니다." : "확정할 대상이 없습니다.");
    return;
  }

  window.bulkParam = { obj, payYear: selectYear, payMonth: selectMonth, salaryList };

  document.getElementById("modalEmpCount").innerText = salaryList.length;
  document.getElementById("modalTotalAmount").innerText = totalNetAmount.toLocaleString();

  const finalBtn = document.getElementById("confirmFinal");
  const newFinalBtn = finalBtn.cloneNode(true);
  finalBtn.parentNode.replaceChild(newFinalBtn, finalBtn);

  updateBulkButtonText(newFinalBtn);

  newFinalBtn.addEventListener("click", async () => {
    const result = await doFinalBulk(obj);
    if (result) {
      const modal = bootstrap.Modal.getOrCreateInstance(document.getElementById("confirmModal"));
      modal.hide();
    }
  });

  const modal = new bootstrap.Modal(document.getElementById("confirmModal"));
  modal.show();
}

function updateAllStatusfinalFlag() {
  const allRows = $('#salaryTable').DataTable().rows().data().toArray();
  allStatus = allRows.every(row => row.payStatus === '확정');
}

function updateBulkButtonText(targetButton = null) {
  const btn = targetButton || document.getElementById("confirmFinal");
  if (!btn) return;
  btn.innerText = allStatus ? "일괄확정취소" : "일괄확정";
}



////////////////////////////////////////////////////////////////////////////////////////
let targetReqButton = null;
let targetReqInfo = {};
let allReqStatus = false;

//단건승인 모달
function salaryRequest(button) {
  const tr = button.closest("tr");
  const empId = tr.querySelector("td[data-salaryid]")?.textContent.trim();
  const salaryId = tr.querySelector("td[data-salaryid]")?.getAttribute("data-salaryid");
  const netSalary = parseInt(tr.querySelector("td:nth-child(11)")?.innerText.replace(/,/g, "") || 0);
  const payStatus = button.innerText.trim();

  const finalBtn = tr.querySelector("button[onclick*='salaryFinal']");
  const finalStatus = finalBtn?.innerText.trim();

  if (finalStatus === "확정대기") {
    alert("지급 요청은 급여가 확정된 이후 가능합니다.");
    return;
  }

  targetReqButton = button;
  targetReqInfo = { empId, salaryId, payStatus };

  document.getElementById("requestEmpCount").innerText = 1;
  document.getElementById("requestTotalAmount").innerText = netSalary.toLocaleString();

  const modal = new bootstrap.Modal(document.getElementById("requestModal"));
  modal.show();

  const reqBtn = document.getElementById("confirmRequest");
  const newReqBtn = reqBtn.cloneNode(true);
  reqBtn.parentNode.replaceChild(newReqBtn, reqBtn);

  newReqBtn.innerText = payStatus === "승인" ? "승인취소" : "지급승인";
  newReqBtn.addEventListener("click", () => doRequestSingle(modal));
}


//단건 승인 ajax
function doRequestSingle(modalInstance) {
  const btn = targetReqButton;
  const { empId, salaryId, payStatus } = targetReqInfo;
  const afterStatus = payStatus === "승인" ? "승인대기" : "승인";

  const selectedDate = document.querySelector("#payDate").value;
  const [payYear, payMonth] = selectedDate.split("-");

  $.ajax({
    url: "/salary/request",
    type: "POST",
    data: $.param({ empId, salaryId, payYear, payMonth }),
    success(res) {
      if (res.cnt === 1) {
        btn.innerText = afterStatus;
        btn.classList.toggle("btn-danger", afterStatus === "승인");
        btn.classList.toggle("btn-outline-primary", afterStatus === "승인대기");

        const td = btn.closest("td");
        let dateDiv = td?.querySelector(".request-date");

        if (afterStatus === "승인") {
          if (!dateDiv) {
            dateDiv = document.createElement("small");
            dateDiv.className = "request-date text-muted mt-1";
            td.appendChild(dateDiv);
          }
          dateDiv.innerText = res.reqDate;

          const tr = btn.closest("tr");
          setTimeout(() => {
            const paidBtn = tr.querySelector("button[onclick*='salaryPaid']");
            if (paidBtn) {
              paidBtn.innerText = "지급완료";
              paidBtn.classList.remove("btn-outline-primary");
              paidBtn.classList.add("btn-danger");

              let payDateDiv = paidBtn.querySelector("small");
              if (!payDateDiv) {
                payDateDiv = document.createElement("small");
                payDateDiv.className = "request-date text-muted mt-1";
                paidBtn.appendChild(payDateDiv);
              }
              payDateDiv.innerText = new Date().toISOString().split("T")[0];
            }
          }, 3000);
        } else {
          if (dateDiv) dateDiv.remove();
        }

        const table = $('#salaryTable').DataTable();
        const rowIdx = table.rows().indexes().filter((idx) => {
          const data = table.row(idx).data();
          return data.salaryId == salaryId;
        })[0];
        if (rowIdx !== undefined) {
          const rowData = table.row(rowIdx).data();
          rowData.paymentRequest = afterStatus;
          table.row(rowIdx).data(rowData).draw(false);
        }

        document.querySelector("#reqPayCount").innerText = `${res.reqCount}명`;

        updateAllRequestStatus();
        updateBulkRequestButtonText();
        showToast("✅ 작업이 성공적으로 완료되었습니다.");
        modalInstance.hide();
      } else {
        alert("승인처리 중 오류가 발생했습니다.");
      }
    },
    error() {
      alert("서버 통신 실패");
    }
  });
}



// 일괄 승인 Ajax 요청
function openRequestBulkModal(obj) {
	updateAllRequestStatus(); //  현재 전체 승인 상태 최신화
  const selectedDate = document.querySelector("#payDate").value;
  const [selectYear, selectMonth] = selectedDate.split("-");

  const table = $('#salaryTable').DataTable();
  const allRows = table.rows().data().toArray();

  const salaryList = [];
  let totalNetAmount = 0;

  allRows.forEach(row => {
    const { empId, salaryId, netSalary, paymentRequest, payStatus } = row;
    if (payStatus !== '확정') return; //  확정된 건만 승인 가능
    if ((!allReqStatus && paymentRequest === "승인대기") || (allReqStatus && paymentRequest === "승인")) {
      if (empId && salaryId) {
        salaryList.push({ empId, salaryId });
        totalNetAmount += netSalary;
      }
    }
  });

  if (salaryList.length === 0) {
    alert(allReqStatus ? "승인취소 대상이 없습니다." : "확정된 급여 중 승인할 대상이 없습니다.");
    return;
  }

  window.reqBulkParam = {
    obj,
    payYear: selectYear,
    payMonth: selectMonth,
    salaryList
  };

  document.getElementById("requestEmpCount").innerText = salaryList.length;
  document.getElementById("requestTotalAmount").innerText = totalNetAmount.toLocaleString();

  const reqBtn = document.getElementById("confirmRequest");
  const newReqBtn = reqBtn.cloneNode(true);
  reqBtn.parentNode.replaceChild(newReqBtn, reqBtn);

  newReqBtn.innerText = allReqStatus ? "일괄 승인취소" : "일괄 승인";

  newReqBtn.addEventListener("click", async () => {
    const result = await doRequestBulk(obj);
    if (result) {
      const modal = bootstrap.Modal.getOrCreateInstance(document.getElementById("requestModal"));
      modal.hide();
    }
  });

  const modal = new bootstrap.Modal(document.getElementById("requestModal"));
  modal.show();
}

async function doRequestBulk(obj) {
  const { payYear, payMonth, salaryList } = window.reqBulkParam;
  const param = { salaryList, payYear, payMonth };

  try {
    const res = await $.ajax({
      url: `/salary/requestAll?payYear=${payYear}&payMonth=${payMonth}`,
      type: "POST",
      contentType: "application/json",
      data: JSON.stringify(param)
    });

    document.querySelector("#reqPayCount").innerText = `${res.reqPayCount}명`;
    alert(allReqStatus ? "일괄 승인취소 완료" : "일괄 승인 완료");

    const table = $('#salaryTable').DataTable();
    table.rows().every(function () {
      const data = this.data();
      const match = salaryList.find(s => s.salaryId == data.salaryId && s.empId == data.empId);

      // ✅ 확정된 항목만 처리
      if (match && data.payStatus === '확정') {
        const newStatus = allReqStatus ? "승인대기" : "승인";
        data.paymentRequest = newStatus;
        data.transferRequestDate = newStatus === "승인" ? new Date().toISOString().split("T")[0] : null;
        this.data(data); // DataTables 내부 데이터 갱신

        // ✅ 버튼 UI도 동기화
        const rowNode = this.node();
        const btn = rowNode.querySelector("button[onclick*='salaryRequest']");
        if (btn) {
          btn.innerText = newStatus;
          btn.classList.toggle("btn-danger", newStatus === "승인");
          btn.classList.toggle("btn-outline-primary", newStatus === "승인대기");

          let dateDiv = btn.parentElement.querySelector("small.request-date");
          if (newStatus === "승인") {
            if (!dateDiv) {
              dateDiv = document.createElement("small");
              dateDiv.className = "request-date text-muted mt-1";
              btn.parentElement.appendChild(dateDiv);
            }
            dateDiv.innerText = new Date().toISOString().split("T")[0];

            // ✅ 프론트에서만 3초 뒤 지급완료 UI 표현
            setTimeout(() => {
              const paidBtn = rowNode.querySelector("button[onclick*='salaryPaid']");
              if (paidBtn) {
                paidBtn.innerText = "지급완료";
                paidBtn.classList.remove("btn-outline-primary");
                paidBtn.classList.add("btn-danger");

                let payDateDiv = paidBtn.querySelector("small");
                if (!payDateDiv) {
                  payDateDiv = document.createElement("small");
                  payDateDiv.className = "request-date text-muted mt-1";
                  paidBtn.appendChild(payDateDiv);
                }
                payDateDiv.innerText = new Date().toISOString().split("T")[0];
              }
            }, 3000);
          } else {
            if (dateDiv) dateDiv.remove();
          }
        }
      }
    });

    table.draw(false); // 테이블 반영

    //  승인 상태 재계산 및 상단 버튼 상태 동기화
    updateAllRequestStatus();
    updateBulkRequestButtonText();
    obj.innerText = allReqStatus ? "승인 일괄취소" : "승인 일괄신청";

    //  지급완료 요약 카드 0.3초 후 갱신
    setTimeout(() => {
      reloadSummary(); // 상단 카드 UI 반영 (paidCount 등)
    }, 300);

    showToast("✅ 일괄 승인 처리가 완료되었습니다.");
    return true;

  } catch (e) {
    alert("승인요청 처리 실패");
    return false;
  }
}



//  전체 승인 상태 계산 함수 (모든 row가 '승인'이면 true)
function updateAllRequestStatus() {
  const table = $('#salaryTable').DataTable();
  const allRows = table.rows().data().toArray();
  allReqStatus = allRows
    .filter(row => row.payStatus === '확정')
    .every(row => row.paymentRequest === '승인');
}

function updateBulkRequestButtonText() {
	  const reqBtn = document.querySelector("#allRequest");
	  if (reqBtn) {
	    reqBtn.innerText = allReqStatus ? "승인 일괄취소" : "승인 일괄신청";
	  }
	}



// 공통 토스트 메시지
function showToast(msg) {
  const container = document.getElementById("toastArea");
  container.innerHTML = `
    <div class="toast align-items-center text-bg-success border-0 show" role="alert">
      <div class="d-flex">
        <div class="toast-body">${msg}</div>
        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
      </div>
    </div>
  `;
  const toastEl = container.querySelector(".toast");
  const bsToast = new bootstrap.Toast(toastEl);
  bsToast.show();
}






