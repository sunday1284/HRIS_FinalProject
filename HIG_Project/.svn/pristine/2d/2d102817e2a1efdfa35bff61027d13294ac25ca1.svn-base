package kr.or.ddit.empappointments.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.department.vo.DepartmentVO;
import kr.or.ddit.empappointments.service.AppointmentService;
import kr.or.ddit.empappointments.vo.AppointmentVO;
import kr.or.ddit.empappointments.vo.AppointmentWrapper;
import kr.or.ddit.employee.service.EmployeeService;
import kr.or.ddit.employee.vo.EmployeeVO;
import kr.or.ddit.job.vo.JobVO;
import kr.or.ddit.position.vo.PositionVO;
import kr.or.ddit.rank.vo.RankVO;
import kr.or.ddit.team.vo.TeamVO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/employee/appointFormUI")
@RequiredArgsConstructor
public class AppointmentInsertController {
	
	private final AppointmentService service;
	private final EmployeeService empService;
	
	/**
	 * 인사발령 등록 화면에 필요한 공통 reference 데이터 (직원, 부서, 팀 등)를 모델에 담는다.
	 * GET 요청 및 POST 유효성 검증 실패 시 모두 공통 사용.

	 * @param model 뷰에 전달할 모델 객체
	 */
	private void loadReferenceData(Model model) {
	    model.addAttribute("empList", empService.readEmpList());
	    model.addAttribute("departmentList", service.readDepartment());
	    model.addAttribute("rankList", service.readRank());
	    model.addAttribute("teamList", service.readTeam());
	    model.addAttribute("positionList", service.readPosition());
	    model.addAttribute("jobList", service.readJob());
	}
	
	// 인사발령 등록 폼 
	@GetMapping
	public String formUI (Model model) {
		
		loadReferenceData(model);
	
		log.info("=================================={}" + model);
		
		return "tiles:employee/appointFormUI";
		
	}
	
	// 인사발령 처리 
	@PostMapping
	public String formProcess(
			@ModelAttribute("appointment") @Validated AppointmentWrapper wrapper
			,BindingResult errors
			,RedirectAttributes redirectAttributes 
			,Model model
		) {
		
		if(errors.hasErrors()) {
			model.addAttribute("errorMessage","❌ 필수 항목을 모두 입력해주세요");
	        loadReferenceData(model); //
	        return "tiles:employee/appointFormUI";
		}
		
		List<AppointmentVO> appointmentList = wrapper.getAppointmentList();
		
		log.info("===============  인  사  발  령  리  스  트 ======================{}",appointmentList);
		
		boolean result1 = service.createAppoint(appointmentList); 
		boolean result2 = service.createAppoint_insertTable(appointmentList);
		
		log.info("===============  인  사  발  령  리  스  트 ======================{}",appointmentList);
				
		if(result1 && result2) {
			redirectAttributes.addFlashAttribute("message","✅ 발령 등록이 완료되었습니다.");
			return "redirect:/employee/appointList";
		} else {
			// 등록 실패 시에도 다시 폼 보여주면서 데이터 유지
			model.addAttribute("errorMessage", "❌ 발령 등록에 실패했습니다.");
			loadReferenceData(model);
			return "tiles:employee/appointFormUI";
		}
		
	}
	
	
	// 직원 정보 조회 (AJAX 요청 처리) 
	@GetMapping("/getEmployeeInfo")
	@ResponseBody
	public ResponseEntity<EmployeeVO> getEmployeeInfo(@RequestParam("empId") String empId) {
		EmployeeVO employee = empService.readEmp(empId);
		if (employee == null) {
			return ResponseEntity.notFound().build();  // 404 반환
		}
		System.out.println("================"+employee);
		return ResponseEntity.ok(employee);  // JSON 형식으로 반환
	}
//	
//	// ✅ 부서 선택 시: 팀 + 직원 목록 동시 반환
//	@GetMapping("/teamsAndEmployees")
//	@ResponseBody
//	public Map<String, Object> getTeamsAndEmployeesByDept(@RequestParam("departmentId") String departmentId) {
//	    Map<String, Object> result = new HashMap<>();
//
//	    List<TeamVO> teams = service.getTeamsByDepartment(departmentId);
//	    List<EmployeeVO> employees = service.getEmployeesByDepartment(departmentId);  // 이 메서드가 없다면 새로 구현
//
//	    result.put("teams", teams);
//	    result.put("employees", employees);
//	    return result;
//	}

    // ✅ 팀별 직원 목록
    @GetMapping("/employees")
    @ResponseBody
    public List<EmployeeVO> getEmployeesByTeam(@RequestParam("teamId") String teamId) {
        return service.getEmployeesByTeam(teamId);
    }
	
	
	
}
