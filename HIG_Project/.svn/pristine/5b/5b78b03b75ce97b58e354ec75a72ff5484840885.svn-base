// approvalTempDraftSave.js

$(document).ready(async function(){
    await listAllDrafts();
    $('#approvalFormModal').on('shown.bs.modal', function () {
       const currentTitle = $("input[name='draftTitle']").val().trim();
       if(currentTitle === "" || currentTitle === "draftTitle"){
           $("input[name='draftTitle']").val("연차신청서");
       }
       loadTempDraft();
    });
    $("#tempSaveDraftBtn").on("click", function() {
        saveTempDraft();
    });
});

export function saveTempDraft(){
    // 기존 입력값에서 draftId 읽기
    let rawDraftId = $("#draftId").val();
    let finalDraftId = rawDraftId ? rawDraftId : generateUniqueDraftId();

    // DB에서 받은 값이면 숫자로 변환 (TMP_ 접두어가 없을 경우)
    if (!finalDraftId.startsWith("TMP_")) {
      const numericVal = parseInt(finalDraftId, 10);
      if (!isNaN(numericVal)) {
        finalDraftId = numericVal;
      }
    }

    const draftData = {
        draftId: finalDraftId,
        templateId: $("#templateId").val() || "",
        empId: $("#empId").val() || "",
        departmentId: $("#departmentId").val() || "",
        draftTitle: $("input[name='draftTitle']").val() || "",
        draftContent: $("#draftContent").val() || "",
        draftUrgent: $("#draftUrgent").prop("checked") ? "Y" : "N",
        timestamp: new Date().toISOString()
    };

    draftData.draftapproverList = [];
    $(".approverRow").each(function() {
        const approver = {
            approverId: $(this).find(".approverId").val() || "",
            approverName: $(this).find(".approverName").val() || "",
            departmentName: $(this).find(".departmentName").val() || "",
            rankName: $(this).find(".rankName").val() || "",
            aprSeq: $(this).find(".aprSeq").val() || "",
            aprStatus: $(this).find(".aprStatus").val() || "대기",
            aprReason: $(this).find(".aprReason").val() || ""
        };
        draftData.draftapproverList.push(approver);
    });

    draftData.annualHistory = {
        leaveDate: $("#leaveDate").val() || "",
        leaveEndDate: $("#leaveEndDate").val() || "",
        annualCode: $("#annualCode").val() || "",
        reason: (window.CKEDITOR && CKEDITOR.instances.reason) ? CKEDITOR.instances.reason.getData() : ""
    };

    const empId = $("#empId").val() || "UNKNOWN";
    const key = `tempDraft_${empId}_${draftData.draftId}`;
    sessionStorage.setItem(key, JSON.stringify(draftData));
    alert("임시저장되었습니다.");

    listAllDrafts();

    setTimeout(() => {
        const modalInstance = bootstrap.Modal.getInstance(document.getElementById("approvalFormModal"));
        if(modalInstance) modalInstance.hide();
        $(".modal-backdrop").remove();
        $("body").removeClass("modal-open");
    }, 100);
}

export function loadTempDraft() {
    const draftId = $("#draftId").val();
    const empId = $("#empId").val() || "UNKNOWN";
    if (draftId) {
        const key = `tempDraft_${empId}_${draftId}`;
        const draftData = sessionStorage.getItem(key);
        if (draftData) {
            try {
                const parsedData = JSON.parse(draftData);
                fillDraftForm(parsedData);
            } catch(e) {
                console.error("임시저장 데이터 파싱 중 오류 발생 (draftId: " + draftId + "):", e);
            }
        } else {
            console.log("해당 draftId(" + draftId + ")에 대한 임시저장 데이터가 없습니다.");
        }
    } else {
        console.log("현재 DRAFT_ID가 없습니다.");
    }
}

export async function getLoggedInUserIdSomehow() {
    try {
        const response = await axios.get(window.contextPath + "/approvalProcess/getApproverId");
        return response.data;
    } catch (error) {
        console.error("로그인 사용자 ID 조회 실패:", error);
        return "UNKNOWN";
    }
}

export async function listAllDrafts() {
    const empId = await getLoggedInUserIdSomehow();
    const container = document.getElementById("draftListContainer");
    container.innerHTML = "";

    const keys = Object.keys(sessionStorage);
    const draftKeys = keys.filter(key => key.startsWith(`tempDraft_${empId}_`));

    if (draftKeys.length === 0) {
        container.innerHTML = "<p>임시저장된 문서가 없습니다.</p>";
        return;
    }

    let html = "<ul class='list-group' id='draftUl'>";
    draftKeys.forEach(key => {
        const dataStr = sessionStorage.getItem(key);
        try {
            const draft = JSON.parse(dataStr);
            const title = draft.draftTitle || "제목 없음";
            const formattedTime = formatTimestampToLocal(draft.timestamp);
            const displayLabel = `[임시저장] ${title} (${formattedTime})`;

            html += `
                <li class="list-group-item d-flex justify-content-between align-items-center">
                  <span>${displayLabel}</span>
                  <div>
                    <button class="btn btn-primary btn-sm openDraftBtn" data-key="${key}">열기</button>
                    <button class="btn btn-danger btn-sm removeDraftBtn" data-key="${key}">삭제</button>
                  </div>
                </li>
            `;
        } catch(e) {
            console.error("Parsing error for key:", key, e);
        }
    });
    html += "</ul>";
    container.innerHTML = html;

    const draftUl = container.querySelector("#draftUl");
    draftUl.addEventListener("click", function(e) {
        if (e.target.matches(".openDraftBtn")) {
            const key = e.target.dataset.key;
            openSavedDraft(key);
        } else if (e.target.matches(".removeDraftBtn")) {
            const key = e.target.dataset.key;
            removeDraft(key);
        }
    });
}

export async function openSavedDraft(key) {
    const dataStr = sessionStorage.getItem(key);
    if (!dataStr) {
        alert("해당 임시저장 데이터를 찾을 수 없습니다.");
        return;
    }

    try {
        const draftData = JSON.parse(dataStr);
        await openApprovalForm(draftData.templateId, draftData.draftTitle || "임시저장 문서");
        fillDraftForm(draftData);
    } catch(e) {
        console.error(e);
        alert("임시저장 데이터를 불러오는 중 오류가 발생했습니다.");
    }
}

export function fillDraftForm(draftData) {
    $("#draftId").val(draftData.draftId);
    $("#templateId").val(draftData.templateId);
    $("#empId").val(draftData.empId);
    $("#departmentId").val(draftData.departmentId || draftData.draftDepartmentId || "");
    $("input[name='draftTitle']").val(draftData.draftTitle);
    $("#draftContent").val(draftData.draftContent);
    $("#draftUrgent").prop("checked", draftData.draftUrgent === "Y");

    $("#approverTableBody").empty();
    if (draftData.draftapproverList && draftData.draftapproverList.length > 0) {
        draftData.draftapproverList.forEach(function(approver) {
            const rowHtml = `
                <tr class="approverRow">
                    <td>
                        <input type="hidden" class="approverId" value="${approver.approverId}" />
                        <input type="text" class="form-control approverName" value="${approver.approverName}" placeholder="승인자명" />
                    </td>
                    <td>
                        <input type="text" class="form-control departmentName" value="${approver.departmentName || approver.approverDepartmentName || ""}" placeholder="부서명" />
                    </td>
                    <td>
                        <input type="text" class="form-control rankName" value="${approver.rankName || approver.approverRankName || ""}" placeholder="직급명" />
                    </td>
                    <td>
                        <input type="number" class="form-control aprSeq" value="${approver.aprSeq}" readonly />
                    </td>
                    <td>
                        <select class="form-control aprStatus" disabled>
                            <option value="대기" ${approver.aprStatus === "대기" ? "selected" : ""}>대기</option>
                        </select>
                        <input type="hidden" class="aprStatusHidden" value="${approver.aprStatus}" />
                    </td>
                </tr>
            `;
            $("#approverTableBody").append(rowHtml);
        });
    }
    $("#leaveDate").val(draftData.annualHistory.leaveDate);
    $("#leaveEndDate").val(draftData.annualHistory.leaveEndDate);
    $("#annualCode").val(draftData.annualHistory.annualCode);

    if (CKEDITOR.instances && CKEDITOR.instances.reason) {
        CKEDITOR.instances.reason.setData(draftData.annualHistory.reason);
    }
}

export async function removeDraft(key) {
    if (confirm("정말 이 임시저장 문서를 삭제하시겠습니까?")) {
        sessionStorage.removeItem(key);
        await listAllDrafts();
    }
}

export function generateUniqueDraftId() {
    return "TMP_" + new Date().getTime();
}

export function formatTimestampToLocal(isoString) {
    if (!isoString) return "";
    const dateObj = new Date(isoString);
    if (isNaN(dateObj.getTime())) return "";

    const year = dateObj.getFullYear();
    const month = String(dateObj.getMonth() + 1).padStart(2, "0");
    const day = String(dateObj.getDate()).padStart(2, "0");
    const hours = String(dateObj.getHours()).padStart(2, "0");
    const minutes = String(dateObj.getMinutes()).padStart(2, "0");

    return `${year}-${month}-${day} ${hours}:${minutes}`;
}

/**
 * 회수된 문서 데이터를 임시저장 구조로 가공하여 SessionStorage에 저장하는 함수.
 */
export function storeRecalledDocInSession(docData, empId) {
    const recalledDraft = {
        draftId: docData.draftId,
        templateId: docData.templateId || "",
        empId: empId,
        departmentId: docData.draftDepartmentId || "",
        draftTitle: docData.draftTitle || "",
        draftContent: docData.draftContent || "",
        draftUrgent: docData.draftUrgent === "Y" ? "Y" : "N",
        timestamp: new Date().toISOString(),
        draftapproverList: [],
        annualHistory: {
            leaveDate: docData.leaveDate || "",
            leaveEndDate: docData.leaveEndDate || "",
            annualCode: docData.annualCode || "",
            reason: docData.reason || ""
        }
    };

    if (docData.draftapproverList && Array.isArray(docData.draftapproverList)) {
        recalledDraft.draftapproverList = docData.draftapproverList.map(ap => ({
            approverId: ap.approverId,
            approverName: ap.approverName,
            approverDepartmentName: ap.approverDepartmentName,
            approverRankName: ap.approverRankName,
            aprSeq: ap.aprSeq,
            aprStatus: ap.aprStatus || "대기",
            aprReason: ap.aprReason || ""
        }));
    }

    const key = `tempDraft_${empId}_${recalledDraft.draftId}`;
    sessionStorage.setItem(key, JSON.stringify(recalledDraft));
}

/**
 * 재상신 요청을 위한 함수.
 */
export async function submitReDraft(draftData) {
    if (typeof draftData.draftId === "string" && draftData.draftId.startsWith("TMP_")) {
        draftData.draftId = null;
    } else if (typeof draftData.draftId === "string") {
        const numericVal = parseInt(draftData.draftId, 10);
        if (!isNaN(numericVal)) {
            draftData.draftId = numericVal;
        }
    }
    try {
        const resp = await axios.post(window.contextPath + "/approval/draft/submit", draftData);
        alert(resp.data);
    } catch (error) {
        console.error("재상신 실패:", error);
        alert("재상신 중 오류가 발생했습니다.");
    }
}
